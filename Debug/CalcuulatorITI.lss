
CalcuulatorITI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00002f98  0000302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008001a6  008001a6  00003172  2**0
                  ALLOC
  3 .stab         00001e78  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd8  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00006392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  00008a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  00009eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000b37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000b677  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <main>
      8a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e9 57       	subi	r30, 0x79	; 121
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	2a 97       	sbiw	r28, 0x0a	; 10
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9a e0       	ldi	r25, 0x0A	; 10
     e74:	69 2f       	mov	r22, r25
     e76:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
     e7a:	89 2f       	mov	r24, r25
     e7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	69 2f       	mov	r22, r25
     e84:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
     e88:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3a 87       	std	Y+10, r19	; 0x0a
     e92:	29 87       	std	Y+9, r18	; 0x09
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	39 f0       	breq	.+14     	; 0xeaa <M_DIO_Void_SetPinDirection+0x52>
     e9c:	29 85       	ldd	r18, Y+9	; 0x09
     e9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <M_DIO_Void_SetPinDirection+0x50>
     ea6:	76 c0       	rjmp	.+236    	; 0xf94 <M_DIO_Void_SetPinDirection+0x13c>
     ea8:	e4 c0       	rjmp	.+456    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	38 87       	std	Y+8, r19	; 0x08
     eb2:	2f 83       	std	Y+7, r18	; 0x07
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	91 05       	cpc	r25, r1
     ebc:	61 f1       	breq	.+88     	; 0xf16 <M_DIO_Void_SetPinDirection+0xbe>
     ebe:	2f 81       	ldd	r18, Y+7	; 0x07
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	23 30       	cpi	r18, 0x03	; 3
     ec4:	31 05       	cpc	r19, r1
     ec6:	34 f4       	brge	.+12     	; 0xed4 <M_DIO_Void_SetPinDirection+0x7c>
     ec8:	8f 81       	ldd	r24, Y+7	; 0x07
     eca:	98 85       	ldd	r25, Y+8	; 0x08
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	69 f0       	breq	.+26     	; 0xeec <M_DIO_Void_SetPinDirection+0x94>
     ed2:	cf c0       	rjmp	.+414    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
     ed4:	2f 81       	ldd	r18, Y+7	; 0x07
     ed6:	38 85       	ldd	r19, Y+8	; 0x08
     ed8:	23 30       	cpi	r18, 0x03	; 3
     eda:	31 05       	cpc	r19, r1
     edc:	89 f1       	breq	.+98     	; 0xf40 <M_DIO_Void_SetPinDirection+0xe8>
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <M_DIO_Void_SetPinDirection+0x92>
     ee8:	40 c0       	rjmp	.+128    	; 0xf6a <M_DIO_Void_SetPinDirection+0x112>
     eea:	c3 c0       	rjmp	.+390    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     eec:	aa e3       	ldi	r26, 0x3A	; 58
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ea e3       	ldi	r30, 0x3A	; 58
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <M_DIO_Void_SetPinDirection+0xb2>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <M_DIO_Void_SetPinDirection+0xae>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	ae c0       	rjmp	.+348    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <M_DIO_Void_SetPinDirection+0xdc>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <M_DIO_Void_SetPinDirection+0xd8>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	99 c0       	rjmp	.+306    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <M_DIO_Void_SetPinDirection+0x106>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <M_DIO_Void_SetPinDirection+0x102>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	84 c0       	rjmp	.+264    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     f6a:	a1 e3       	ldi	r26, 0x31	; 49
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e1 e3       	ldi	r30, 0x31	; 49
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <M_DIO_Void_SetPinDirection+0x130>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <M_DIO_Void_SetPinDirection+0x12c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	6f c0       	rjmp	.+222    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3e 83       	std	Y+6, r19	; 0x06
     f9c:	2d 83       	std	Y+5, r18	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	91 05       	cpc	r25, r1
     fa6:	51 f1       	breq	.+84     	; 0xffc <M_DIO_Void_SetPinDirection+0x1a4>
     fa8:	2d 81       	ldd	r18, Y+5	; 0x05
     faa:	3e 81       	ldd	r19, Y+6	; 0x06
     fac:	23 30       	cpi	r18, 0x03	; 3
     fae:	31 05       	cpc	r19, r1
     fb0:	34 f4       	brge	.+12     	; 0xfbe <M_DIO_Void_SetPinDirection+0x166>
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 05       	cpc	r25, r1
     fba:	61 f0       	breq	.+24     	; 0xfd4 <M_DIO_Void_SetPinDirection+0x17c>
     fbc:	5a c0       	rjmp	.+180    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	23 30       	cpi	r18, 0x03	; 3
     fc4:	31 05       	cpc	r19, r1
     fc6:	71 f1       	breq	.+92     	; 0x1024 <M_DIO_Void_SetPinDirection+0x1cc>
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	91 05       	cpc	r25, r1
     fd0:	e9 f1       	breq	.+122    	; 0x104c <M_DIO_Void_SetPinDirection+0x1f4>
     fd2:	4f c0       	rjmp	.+158    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <M_DIO_Void_SetPinDirection+0x19a>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <M_DIO_Void_SetPinDirection+0x196>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	3b c0       	rjmp	.+118    	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
     ffc:	a7 e3       	ldi	r26, 0x37	; 55
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <M_DIO_Void_SetPinDirection+0x1c2>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <M_DIO_Void_SetPinDirection+0x1be>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	27 c0       	rjmp	.+78     	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1024:	a4 e3       	ldi	r26, 0x34	; 52
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e4 e3       	ldi	r30, 0x34	; 52
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <M_DIO_Void_SetPinDirection+0x1ea>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <M_DIO_Void_SetPinDirection+0x1e6>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	13 c0       	rjmp	.+38     	; 0x1072 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <M_DIO_Void_SetPinDirection+0x212>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <M_DIO_Void_SetPinDirection+0x20e>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    1072:	2a 96       	adiw	r28, 0x0a	; 10
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <M_DIO_Void_SetPinValue>:


void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2a 97       	sbiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9a e0       	ldi	r25, 0x0A	; 10
    10a0:	69 2f       	mov	r22, r25
    10a2:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    10a6:	89 2f       	mov	r24, r25
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9a e0       	ldi	r25, 0x0A	; 10
    10ae:	69 2f       	mov	r22, r25
    10b0:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    10b4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3a 87       	std	Y+10, r19	; 0x0a
    10be:	29 87       	std	Y+9, r18	; 0x09
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <M_DIO_Void_SetPinValue+0x52>
    10c8:	29 85       	ldd	r18, Y+9	; 0x09
    10ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <M_DIO_Void_SetPinValue+0x50>
    10d2:	76 c0       	rjmp	.+236    	; 0x11c0 <M_DIO_Void_SetPinValue+0x13c>
    10d4:	e4 c0       	rjmp	.+456    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	38 87       	std	Y+8, r19	; 0x08
    10de:	2f 83       	std	Y+7, r18	; 0x07
    10e0:	8f 81       	ldd	r24, Y+7	; 0x07
    10e2:	98 85       	ldd	r25, Y+8	; 0x08
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	61 f1       	breq	.+88     	; 0x1142 <M_DIO_Void_SetPinValue+0xbe>
    10ea:	2f 81       	ldd	r18, Y+7	; 0x07
    10ec:	38 85       	ldd	r19, Y+8	; 0x08
    10ee:	23 30       	cpi	r18, 0x03	; 3
    10f0:	31 05       	cpc	r19, r1
    10f2:	34 f4       	brge	.+12     	; 0x1100 <M_DIO_Void_SetPinValue+0x7c>
    10f4:	8f 81       	ldd	r24, Y+7	; 0x07
    10f6:	98 85       	ldd	r25, Y+8	; 0x08
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	69 f0       	breq	.+26     	; 0x1118 <M_DIO_Void_SetPinValue+0x94>
    10fe:	cf c0       	rjmp	.+414    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
    1100:	2f 81       	ldd	r18, Y+7	; 0x07
    1102:	38 85       	ldd	r19, Y+8	; 0x08
    1104:	23 30       	cpi	r18, 0x03	; 3
    1106:	31 05       	cpc	r19, r1
    1108:	89 f1       	breq	.+98     	; 0x116c <M_DIO_Void_SetPinValue+0xe8>
    110a:	8f 81       	ldd	r24, Y+7	; 0x07
    110c:	98 85       	ldd	r25, Y+8	; 0x08
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <M_DIO_Void_SetPinValue+0x92>
    1114:	40 c0       	rjmp	.+128    	; 0x1196 <M_DIO_Void_SetPinValue+0x112>
    1116:	c3 c0       	rjmp	.+390    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1118:	ab e3       	ldi	r26, 0x3B	; 59
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	eb e3       	ldi	r30, 0x3B	; 59
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <M_DIO_Void_SetPinValue+0xb2>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <M_DIO_Void_SetPinValue+0xae>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	ae c0       	rjmp	.+348    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1142:	a8 e3       	ldi	r26, 0x38	; 56
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e8 e3       	ldi	r30, 0x38	; 56
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <M_DIO_Void_SetPinValue+0xdc>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <M_DIO_Void_SetPinValue+0xd8>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	99 c0       	rjmp	.+306    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    116c:	a5 e3       	ldi	r26, 0x35	; 53
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e3       	ldi	r30, 0x35	; 53
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <M_DIO_Void_SetPinValue+0x106>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <M_DIO_Void_SetPinValue+0x102>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	84 c0       	rjmp	.+264    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1196:	a2 e3       	ldi	r26, 0x32	; 50
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e2 e3       	ldi	r30, 0x32	; 50
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <M_DIO_Void_SetPinValue+0x130>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <M_DIO_Void_SetPinValue+0x12c>
    11b8:	80 95       	com	r24
    11ba:	84 23       	and	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	6f c0       	rjmp	.+222    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3e 83       	std	Y+6, r19	; 0x06
    11c8:	2d 83       	std	Y+5, r18	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	91 05       	cpc	r25, r1
    11d2:	51 f1       	breq	.+84     	; 0x1228 <M_DIO_Void_SetPinValue+0x1a4>
    11d4:	2d 81       	ldd	r18, Y+5	; 0x05
    11d6:	3e 81       	ldd	r19, Y+6	; 0x06
    11d8:	23 30       	cpi	r18, 0x03	; 3
    11da:	31 05       	cpc	r19, r1
    11dc:	34 f4       	brge	.+12     	; 0x11ea <M_DIO_Void_SetPinValue+0x166>
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	61 f0       	breq	.+24     	; 0x1200 <M_DIO_Void_SetPinValue+0x17c>
    11e8:	5a c0       	rjmp	.+180    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	3e 81       	ldd	r19, Y+6	; 0x06
    11ee:	23 30       	cpi	r18, 0x03	; 3
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f1       	breq	.+92     	; 0x1250 <M_DIO_Void_SetPinValue+0x1cc>
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	91 05       	cpc	r25, r1
    11fc:	e9 f1       	breq	.+122    	; 0x1278 <M_DIO_Void_SetPinValue+0x1f4>
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1200:	ab e3       	ldi	r26, 0x3B	; 59
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e3       	ldi	r30, 0x3B	; 59
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <M_DIO_Void_SetPinValue+0x19a>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <M_DIO_Void_SetPinValue+0x196>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	3b c0       	rjmp	.+118    	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1228:	a8 e3       	ldi	r26, 0x38	; 56
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e8 e3       	ldi	r30, 0x38	; 56
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <M_DIO_Void_SetPinValue+0x1c2>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <M_DIO_Void_SetPinValue+0x1be>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	27 c0       	rjmp	.+78     	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1250:	a5 e3       	ldi	r26, 0x35	; 53
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e3       	ldi	r30, 0x35	; 53
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <M_DIO_Void_SetPinValue+0x1ea>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <M_DIO_Void_SetPinValue+0x1e6>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	13 c0       	rjmp	.+38     	; 0x129e <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <M_DIO_Void_SetPinValue+0x212>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <M_DIO_Void_SetPinValue+0x20e>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    129e:	2a 96       	adiw	r28, 0x0a	; 10
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <M_DIO_Void_GetPinValue>:

u8 M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <M_DIO_Void_GetPinValue+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <M_DIO_Void_GetPinValue+0x8>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <M_DIO_Void_GetPinValue+0xa>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	9a e0       	ldi	r25, 0x0A	; 10
    12c4:	69 2f       	mov	r22, r25
    12c6:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    12ca:	89 2f       	mov	r24, r25
    12cc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9a e0       	ldi	r25, 0x0A	; 10
    12d2:	69 2f       	mov	r22, r25
    12d4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    12da:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3e 83       	std	Y+6, r19	; 0x06
    12e4:	2d 83       	std	Y+5, r18	; 0x05
    12e6:	4d 81       	ldd	r20, Y+5	; 0x05
    12e8:	5e 81       	ldd	r21, Y+6	; 0x06
    12ea:	42 30       	cpi	r20, 0x02	; 2
    12ec:	51 05       	cpc	r21, r1
    12ee:	41 f1       	breq	.+80     	; 0x1340 <M_DIO_Void_GetPinValue+0x90>
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	34 f4       	brge	.+12     	; 0x1306 <M_DIO_Void_GetPinValue+0x56>
    12fa:	2d 81       	ldd	r18, Y+5	; 0x05
    12fc:	3e 81       	ldd	r19, Y+6	; 0x06
    12fe:	21 30       	cpi	r18, 0x01	; 1
    1300:	31 05       	cpc	r19, r1
    1302:	61 f0       	breq	.+24     	; 0x131c <M_DIO_Void_GetPinValue+0x6c>
    1304:	52 c0       	rjmp	.+164    	; 0x13aa <M_DIO_Void_GetPinValue+0xfa>
    1306:	4d 81       	ldd	r20, Y+5	; 0x05
    1308:	5e 81       	ldd	r21, Y+6	; 0x06
    130a:	43 30       	cpi	r20, 0x03	; 3
    130c:	51 05       	cpc	r21, r1
    130e:	51 f1       	breq	.+84     	; 0x1364 <M_DIO_Void_GetPinValue+0xb4>
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	91 05       	cpc	r25, r1
    1318:	b9 f1       	breq	.+110    	; 0x1388 <M_DIO_Void_GetPinValue+0xd8>
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    131c:	e9 e3       	ldi	r30, 0x39	; 57
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <M_DIO_Void_GetPinValue+0x84>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <M_DIO_Void_GetPinValue+0x80>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	35 c0       	rjmp	.+106    	; 0x13aa <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1340:	e6 e3       	ldi	r30, 0x36	; 54
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <M_DIO_Void_GetPinValue+0xa8>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <M_DIO_Void_GetPinValue+0xa4>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	23 c0       	rjmp	.+70     	; 0x13aa <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <M_DIO_Void_GetPinValue+0xcc>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <M_DIO_Void_GetPinValue+0xc8>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	11 c0       	rjmp	.+34     	; 0x13aa <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1388:	e0 e3       	ldi	r30, 0x30	; 48
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <M_DIO_Void_GetPinValue+0xf0>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <M_DIO_Void_GetPinValue+0xec>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	26 96       	adiw	r28, 0x06	; 6
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <M_DIO_Void_TogPin>:


void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <M_DIO_Void_TogPin+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <M_DIO_Void_TogPin+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9a e0       	ldi	r25, 0x0A	; 10
    13d2:	69 2f       	mov	r22, r25
    13d4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    13d8:	89 2f       	mov	r24, r25
    13da:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9a e0       	ldi	r25, 0x0A	; 10
    13e0:	69 2f       	mov	r22, r25
    13e2:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__udivmodqi4>
    13e6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	51 f1       	breq	.+84     	; 0x1450 <M_DIO_Void_TogPin+0x92>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	23 30       	cpi	r18, 0x03	; 3
    1402:	31 05       	cpc	r19, r1
    1404:	34 f4       	brge	.+12     	; 0x1412 <M_DIO_Void_TogPin+0x54>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	61 f0       	breq	.+24     	; 0x1428 <M_DIO_Void_TogPin+0x6a>
    1410:	5a c0       	rjmp	.+180    	; 0x14c6 <M_DIO_Void_TogPin+0x108>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	23 30       	cpi	r18, 0x03	; 3
    1418:	31 05       	cpc	r19, r1
    141a:	71 f1       	breq	.+92     	; 0x1478 <M_DIO_Void_TogPin+0xba>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	91 05       	cpc	r25, r1
    1424:	e9 f1       	breq	.+122    	; 0x14a0 <M_DIO_Void_TogPin+0xe2>
    1426:	4f c0       	rjmp	.+158    	; 0x14c6 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <M_DIO_Void_TogPin+0x88>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <M_DIO_Void_TogPin+0x84>
    144a:	84 27       	eor	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	3b c0       	rjmp	.+118    	; 0x14c6 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <M_DIO_Void_TogPin+0xb0>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <M_DIO_Void_TogPin+0xac>
    1472:	84 27       	eor	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	27 c0       	rjmp	.+78     	; 0x14c6 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <M_DIO_Void_TogPin+0xd8>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <M_DIO_Void_TogPin+0xd4>
    149a:	84 27       	eor	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	13 c0       	rjmp	.+38     	; 0x14c6 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    14a0:	a2 e3       	ldi	r26, 0x32	; 50
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e2 e3       	ldi	r30, 0x32	; 50
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <M_DIO_Void_TogPin+0x100>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <M_DIO_Void_TogPin+0xfc>
    14c2:	84 27       	eor	r24, r20
    14c4:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <H_Lcd_Void_LCDInit>:
#include "LCD_Config.h"
#include "math.h"


void H_Lcd_Void_LCDInit(void)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62


	M_DIO_Void_SetPinDirection(LCD_D0_PIN,OUTPUT);
    14de:	8a e0       	ldi	r24, 0x0A	; 10
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D1_PIN,OUTPUT);
    14e6:	8b e0       	ldi	r24, 0x0B	; 11
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D2_PIN,OUTPUT);
    14ee:	8c e0       	ldi	r24, 0x0C	; 12
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D3_PIN,OUTPUT);
    14f6:	8d e0       	ldi	r24, 0x0D	; 13
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    14fe:	8e e0       	ldi	r24, 0x0E	; 14
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1506:	8f e0       	ldi	r24, 0x0F	; 15
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1516:	81 e1       	ldi	r24, 0x11	; 17
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    151e:	84 e1       	ldi	r24, 0x14	; 20
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1526:	85 e1       	ldi	r24, 0x15	; 21
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
    152e:	88 e3       	ldi	r24, 0x38	; 56
    1530:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1534:	8c e0       	ldi	r24, 0x0C	; 12
    1536:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <H_Lcd_Void_LCDWriteCommand>



}
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <H_Lcd_Void_LCDWriteCharacter>:


void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	2f 97       	sbiw	r28, 0x0f	; 15
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	8f 87       	std	Y+15, r24	; 0x0f
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    155c:	84 e1       	ldi	r24, 0x14	; 20
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>





	M_DIO_Void_SetPinValue(LCD_D0_PIN,GET_BIT(Copy_U8_Character,0));
    1564:	8f 85       	ldd	r24, Y+15	; 0x0f
    1566:	98 2f       	mov	r25, r24
    1568:	91 70       	andi	r25, 0x01	; 1
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	69 2f       	mov	r22, r25
    156e:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D1_PIN,GET_BIT(Copy_U8_Character,1));
    1572:	8f 85       	ldd	r24, Y+15	; 0x0f
    1574:	86 95       	lsr	r24
    1576:	98 2f       	mov	r25, r24
    1578:	91 70       	andi	r25, 0x01	; 1
    157a:	8b e0       	ldi	r24, 0x0B	; 11
    157c:	69 2f       	mov	r22, r25
    157e:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D2_PIN,GET_BIT(Copy_U8_Character,2));
    1582:	8f 85       	ldd	r24, Y+15	; 0x0f
    1584:	86 95       	lsr	r24
    1586:	86 95       	lsr	r24
    1588:	98 2f       	mov	r25, r24
    158a:	91 70       	andi	r25, 0x01	; 1
    158c:	8c e0       	ldi	r24, 0x0C	; 12
    158e:	69 2f       	mov	r22, r25
    1590:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D3_PIN,GET_BIT(Copy_U8_Character,3));
    1594:	8f 85       	ldd	r24, Y+15	; 0x0f
    1596:	86 95       	lsr	r24
    1598:	86 95       	lsr	r24
    159a:	86 95       	lsr	r24
    159c:	98 2f       	mov	r25, r24
    159e:	91 70       	andi	r25, 0x01	; 1
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	69 2f       	mov	r22, r25
    15a4:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	82 95       	swap	r24
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	98 2f       	mov	r25, r24
    15b0:	91 70       	andi	r25, 0x01	; 1
    15b2:	8e e0       	ldi	r24, 0x0E	; 14
    15b4:	69 2f       	mov	r22, r25
    15b6:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    15ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    15bc:	82 95       	swap	r24
    15be:	86 95       	lsr	r24
    15c0:	87 70       	andi	r24, 0x07	; 7
    15c2:	98 2f       	mov	r25, r24
    15c4:	91 70       	andi	r25, 0x01	; 1
    15c6:	8f e0       	ldi	r24, 0x0F	; 15
    15c8:	69 2f       	mov	r22, r25
    15ca:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	82 95       	swap	r24
    15d2:	86 95       	lsr	r24
    15d4:	86 95       	lsr	r24
    15d6:	83 70       	andi	r24, 0x03	; 3
    15d8:	98 2f       	mov	r25, r24
    15da:	91 70       	andi	r25, 0x01	; 1
    15dc:	80 e1       	ldi	r24, 0x10	; 16
    15de:	69 2f       	mov	r22, r25
    15e0:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    15e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e6:	98 2f       	mov	r25, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	99 27       	eor	r25, r25
    15ec:	99 1f       	adc	r25, r25
    15ee:	81 e1       	ldi	r24, 0x11	; 17
    15f0:	69 2f       	mov	r22, r25
    15f2:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    15f6:	85 e1       	ldi	r24, 0x15	; 21
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e8       	ldi	r26, 0x80	; 128
    1604:	bf e3       	ldi	r27, 0x3F	; 63
    1606:	8b 87       	std	Y+11, r24	; 0x0b
    1608:	9c 87       	std	Y+12, r25	; 0x0c
    160a:	ad 87       	std	Y+13, r26	; 0x0d
    160c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1610:	7c 85       	ldd	r23, Y+12	; 0x0c
    1612:	8d 85       	ldd	r24, Y+13	; 0x0d
    1614:	9e 85       	ldd	r25, Y+14	; 0x0e
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	53 e4       	ldi	r21, 0x43	; 67
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8f 83       	std	Y+7, r24	; 0x07
    1628:	98 87       	std	Y+8, r25	; 0x08
    162a:	a9 87       	std	Y+9, r26	; 0x09
    162c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	2c f4       	brge	.+10     	; 0x1650 <H_Lcd_Void_LCDWriteCharacter+0x10a>
		__ticks = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <H_Lcd_Void_LCDWriteCharacter+0x188>
	else if (__tmp > 65535)
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	4f e7       	ldi	r20, 0x7F	; 127
    165e:	57 e4       	ldi	r21, 0x47	; 71
    1660:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1664:	18 16       	cp	r1, r24
    1666:	4c f5       	brge	.+82     	; 0x16ba <H_Lcd_Void_LCDWriteCharacter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1668:	6b 85       	ldd	r22, Y+11	; 0x0b
    166a:	7c 85       	ldd	r23, Y+12	; 0x0c
    166c:	8d 85       	ldd	r24, Y+13	; 0x0d
    166e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <H_Lcd_Void_LCDWriteCharacter+0x16a>
    1692:	89 e1       	ldi	r24, 0x19	; 25
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <H_Lcd_Void_LCDWriteCharacter+0x158>
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	69 f7       	brne	.-38     	; 0x1692 <H_Lcd_Void_LCDWriteCharacter+0x14c>
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <H_Lcd_Void_LCDWriteCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <H_Lcd_Void_LCDWriteCharacter+0x194>
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    16e2:	85 e1       	ldi	r24, 0x15	; 21
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>


}
    16ea:	2f 96       	adiw	r28, 0x0f	; 15
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <H_Lcd_Void_LCDWriteCommand>:


void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	2f 97       	sbiw	r28, 0x0f	; 15
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	8f 87       	std	Y+15, r24	; 0x0f
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1712:	84 e1       	ldi	r24, 0x14	; 20
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>


	M_DIO_Void_SetPinValue(LCD_D0_PIN,GET_BIT(Copy_U8_Command,0));
    171a:	8f 85       	ldd	r24, Y+15	; 0x0f
    171c:	98 2f       	mov	r25, r24
    171e:	91 70       	andi	r25, 0x01	; 1
    1720:	8a e0       	ldi	r24, 0x0A	; 10
    1722:	69 2f       	mov	r22, r25
    1724:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D1_PIN,GET_BIT(Copy_U8_Command,1));
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	86 95       	lsr	r24
    172c:	98 2f       	mov	r25, r24
    172e:	91 70       	andi	r25, 0x01	; 1
    1730:	8b e0       	ldi	r24, 0x0B	; 11
    1732:	69 2f       	mov	r22, r25
    1734:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D2_PIN,GET_BIT(Copy_U8_Command,2));
    1738:	8f 85       	ldd	r24, Y+15	; 0x0f
    173a:	86 95       	lsr	r24
    173c:	86 95       	lsr	r24
    173e:	98 2f       	mov	r25, r24
    1740:	91 70       	andi	r25, 0x01	; 1
    1742:	8c e0       	ldi	r24, 0x0C	; 12
    1744:	69 2f       	mov	r22, r25
    1746:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D3_PIN,GET_BIT(Copy_U8_Command,3));
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	86 95       	lsr	r24
    174e:	86 95       	lsr	r24
    1750:	86 95       	lsr	r24
    1752:	98 2f       	mov	r25, r24
    1754:	91 70       	andi	r25, 0x01	; 1
    1756:	8d e0       	ldi	r24, 0x0D	; 13
    1758:	69 2f       	mov	r22, r25
    175a:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	82 95       	swap	r24
    1762:	8f 70       	andi	r24, 0x0F	; 15
    1764:	98 2f       	mov	r25, r24
    1766:	91 70       	andi	r25, 0x01	; 1
    1768:	8e e0       	ldi	r24, 0x0E	; 14
    176a:	69 2f       	mov	r22, r25
    176c:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    1770:	8f 85       	ldd	r24, Y+15	; 0x0f
    1772:	82 95       	swap	r24
    1774:	86 95       	lsr	r24
    1776:	87 70       	andi	r24, 0x07	; 7
    1778:	98 2f       	mov	r25, r24
    177a:	91 70       	andi	r25, 0x01	; 1
    177c:	8f e0       	ldi	r24, 0x0F	; 15
    177e:	69 2f       	mov	r22, r25
    1780:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	82 95       	swap	r24
    1788:	86 95       	lsr	r24
    178a:	86 95       	lsr	r24
    178c:	83 70       	andi	r24, 0x03	; 3
    178e:	98 2f       	mov	r25, r24
    1790:	91 70       	andi	r25, 0x01	; 1
    1792:	80 e1       	ldi	r24, 0x10	; 16
    1794:	69 2f       	mov	r22, r25
    1796:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    179a:	8f 85       	ldd	r24, Y+15	; 0x0f
    179c:	98 2f       	mov	r25, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	99 27       	eor	r25, r25
    17a2:	99 1f       	adc	r25, r25
    17a4:	81 e1       	ldi	r24, 0x11	; 17
    17a6:	69 2f       	mov	r22, r25
    17a8:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    17ac:	85 e1       	ldi	r24, 0x15	; 21
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e8       	ldi	r26, 0x80	; 128
    17ba:	bf e3       	ldi	r27, 0x3F	; 63
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	ad 87       	std	Y+13, r26	; 0x0d
    17c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a e7       	ldi	r20, 0x7A	; 122
    17d2:	53 e4       	ldi	r21, 0x43	; 67
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 83       	std	Y+7, r24	; 0x07
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	a9 87       	std	Y+9, r26	; 0x09
    17e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <H_Lcd_Void_LCDWriteCommand+0x10a>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <H_Lcd_Void_LCDWriteCommand+0x188>
	else if (__tmp > 65535)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <H_Lcd_Void_LCDWriteCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1820:	7c 85       	ldd	r23, Y+12	; 0x0c
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <H_Lcd_Void_LCDWriteCommand+0x16a>
    1848:	89 e1       	ldi	r24, 0x19	; 25
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <H_Lcd_Void_LCDWriteCommand+0x158>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <H_Lcd_Void_LCDWriteCommand+0x14c>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <H_Lcd_Void_LCDWriteCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <H_Lcd_Void_LCDWriteCommand+0x194>
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1898:	85 e1       	ldi	r24, 0x15	; 21
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>

}
    18a0:	2f 96       	adiw	r28, 0x0f	; 15
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <H_Lcd_Void_LCDWriteString>:


void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <H_Lcd_Void_LCDWriteString+0x6>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    18c2:	19 82       	std	Y+1, r1	; 0x01
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	fc 01       	movw	r30, r24
    18d2:	e2 0f       	add	r30, r18
    18d4:	f3 1f       	adc	r31, r19
    18d6:	80 81       	ld	r24, Z
    18d8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	89 83       	std	Y+1, r24	; 0x01


void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	fc 01       	movw	r30, r24
    18ee:	e2 0f       	add	r30, r18
    18f0:	f3 1f       	adc	r31, r19
    18f2:	80 81       	ld	r24, Z
    18f4:	88 23       	and	r24, r24
    18f6:	39 f7       	brne	.-50     	; 0x18c6 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <H_Lcd_Void_LCDClear>:


void H_Lcd_Void_LCDClear()
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <H_Lcd_Void_LCDWriteCommand>
}
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <H_Lcd_Void_LCDWriteNumber>:


void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	2f 97       	sbiw	r28, 0x0f	; 15
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	6c 87       	std	Y+12, r22	; 0x0c
    1932:	7d 87       	std	Y+13, r23	; 0x0d
    1934:	8e 87       	std	Y+14, r24	; 0x0e
    1936:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    1938:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    193a:	8a e0       	ldi	r24, 0x0A	; 10
    193c:	fe 01       	movw	r30, r28
    193e:	32 96       	adiw	r30, 0x02	; 2
    1940:	df 01       	movw	r26, r30
    1942:	98 2f       	mov	r25, r24
    1944:	1d 92       	st	X+, r1
    1946:	9a 95       	dec	r25
    1948:	e9 f7       	brne	.-6      	; 0x1944 <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    194a:	8c 85       	ldd	r24, Y+12	; 0x0c
    194c:	9d 85       	ldd	r25, Y+13	; 0x0d
    194e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1950:	bf 85       	ldd	r27, Y+15	; 0x0f
    1952:	bb 23       	and	r27, r27
    1954:	94 f4       	brge	.+36     	; 0x197a <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    1956:	8c 85       	ldd	r24, Y+12	; 0x0c
    1958:	9d 85       	ldd	r25, Y+13	; 0x0d
    195a:	ae 85       	ldd	r26, Y+14	; 0x0e
    195c:	bf 85       	ldd	r27, Y+15	; 0x0f
    195e:	b0 95       	com	r27
    1960:	a0 95       	com	r26
    1962:	90 95       	com	r25
    1964:	81 95       	neg	r24
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	af 4f       	sbci	r26, 0xFF	; 255
    196a:	bf 4f       	sbci	r27, 0xFF	; 255
    196c:	8c 87       	std	Y+12, r24	; 0x0c
    196e:	9d 87       	std	Y+13, r25	; 0x0d
    1970:	ae 87       	std	Y+14, r26	; 0x0e
    1972:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    1974:	8d e2       	ldi	r24, 0x2D	; 45
    1976:	0e 94 a3 0a 	call	0x1546	; 0x1546 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	08 2f       	mov	r16, r24
    197e:	11 27       	eor	r17, r17
    1980:	07 fd       	sbrc	r16, 7
    1982:	10 95       	com	r17
    1984:	8c 85       	ldd	r24, Y+12	; 0x0c
    1986:	9d 85       	ldd	r25, Y+13	; 0x0d
    1988:	ae 85       	ldd	r26, Y+14	; 0x0e
    198a:	bf 85       	ldd	r27, Y+15	; 0x0f
    198c:	2a e0       	ldi	r18, 0x0A	; 10
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divmodsi4>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	28 2f       	mov	r18, r24
    19a2:	ce 01       	movw	r24, r28
    19a4:	02 96       	adiw	r24, 0x02	; 2
    19a6:	fc 01       	movw	r30, r24
    19a8:	e0 0f       	add	r30, r16
    19aa:	f1 1f       	adc	r31, r17
    19ac:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    19ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    19b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divmodsi4>
    19c6:	da 01       	movw	r26, r20
    19c8:	c9 01       	movw	r24, r18
    19ca:	8c 87       	std	Y+12, r24	; 0x0c
    19cc:	9d 87       	std	Y+13, r25	; 0x0d
    19ce:	ae 87       	std	Y+14, r26	; 0x0e
    19d0:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	8f 5f       	subi	r24, 0xFF	; 255
    19d6:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    19d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19da:	9d 85       	ldd	r25, Y+13	; 0x0d
    19dc:	ae 85       	ldd	r26, Y+14	; 0x0e
    19de:	bf 85       	ldd	r27, Y+15	; 0x0f
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	a1 05       	cpc	r26, r1
    19e4:	b1 05       	cpc	r27, r1
    19e6:	49 f6       	brne	.-110    	; 0x197a <H_Lcd_Void_LCDWriteNumber+0x62>
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	81 50       	subi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	33 27       	eor	r19, r19
    19f6:	27 fd       	sbrc	r18, 7
    19f8:	30 95       	com	r19
    19fa:	ce 01       	movw	r24, r28
    19fc:	02 96       	adiw	r24, 0x02	; 2
    19fe:	fc 01       	movw	r30, r24
    1a00:	e2 0f       	add	r30, r18
    1a02:	f3 1f       	adc	r31, r19
    1a04:	80 81       	ld	r24, Z
    1a06:	80 5d       	subi	r24, 0xD0	; 208
    1a08:	0e 94 a3 0a 	call	0x1546	; 0x1546 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	18 16       	cp	r1, r24
    1a10:	64 f3       	brlt	.-40     	; 0x19ea <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    1a12:	2f 96       	adiw	r28, 0x0f	; 15
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <LCD_Write_float>:
void LCD_Write_float(f32 n){
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	29 97       	sbiw	r28, 0x09	; 9
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	6e 83       	std	Y+6, r22	; 0x06
    1a3e:	7f 83       	std	Y+7, r23	; 0x07
    1a40:	88 87       	std	Y+8, r24	; 0x08
    1a42:	99 87       	std	Y+9, r25	; 0x09

	s32 d;
	u8 t=0;
    1a44:	19 82       	std	Y+1, r1	; 0x01
	H_Lcd_Void_LCDWriteNumber(floor(n));
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a4c:	b9 85       	ldd	r27, Y+9	; 0x09
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <floor>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <H_Lcd_Void_LCDWriteNumber>
    1a6e:	38 c0       	rjmp	.+112    	; 0x1ae0 <LCD_Write_float+0xb8>
	while(n!=floor( n)){
		if(t==0){
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	88 23       	and	r24, r24
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <LCD_Write_float+0x5c>
	H_Lcd_Void_LCDWriteString(".");
    1a76:	80 e6       	ldi	r24, 0x60	; 96
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Lcd_Void_LCDWriteString>
	t++;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	89 83       	std	Y+1, r24	; 0x01
		}
	n=n*10;
    1a84:	6e 81       	ldd	r22, Y+6	; 0x06
    1a86:	7f 81       	ldd	r23, Y+7	; 0x07
    1a88:	88 85       	ldd	r24, Y+8	; 0x08
    1a8a:	99 85       	ldd	r25, Y+9	; 0x09
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8e 83       	std	Y+6, r24	; 0x06
    1a9e:	9f 83       	std	Y+7, r25	; 0x07
    1aa0:	a8 87       	std	Y+8, r26	; 0x08
    1aa2:	b9 87       	std	Y+9, r27	; 0x09
	d=(s32)n;
    1aa4:	6e 81       	ldd	r22, Y+6	; 0x06
    1aa6:	7f 81       	ldd	r23, Y+7	; 0x07
    1aa8:	88 85       	ldd	r24, Y+8	; 0x08
    1aaa:	99 85       	ldd	r25, Y+9	; 0x09
    1aac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	9b 83       	std	Y+3, r25	; 0x03
    1ab8:	ac 83       	std	Y+4, r26	; 0x04
    1aba:	bd 83       	std	Y+5, r27	; 0x05
	H_Lcd_Void_LCDWriteNumber(d%10);
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	ac 81       	ldd	r26, Y+4	; 0x04
    1ac2:	bd 81       	ldd	r27, Y+5	; 0x05
    1ac4:	2a e0       	ldi	r18, 0x0A	; 10
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__divmodsi4>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <H_Lcd_Void_LCDWriteNumber>
void LCD_Write_float(f32 n){

	s32 d;
	u8 t=0;
	H_Lcd_Void_LCDWriteNumber(floor(n));
	while(n!=floor( n)){
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ae6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <floor>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	2e 81       	ldd	r18, Y+6	; 0x06
    1afa:	3f 81       	ldd	r19, Y+7	; 0x07
    1afc:	48 85       	ldd	r20, Y+8	; 0x08
    1afe:	59 85       	ldd	r21, Y+9	; 0x09
    1b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <LCD_Write_float+0xe2>
    1b08:	b3 cf       	rjmp	.-154    	; 0x1a70 <LCD_Write_float+0x48>

	}



}
    1b0a:	29 96       	adiw	r28, 0x09	; 9
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <H_Lcd_Void_LCDGoTo>:


void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <H_Lcd_Void_LCDGoTo+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <H_Lcd_Void_LCDGoTo+0x8>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <H_Lcd_Void_LCDGoTo+0xa>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	8a 83       	std	Y+2, r24	; 0x02
    1b36:	84 e9       	ldi	r24, 0x94	; 148
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	84 ed       	ldi	r24, 0xD4	; 212
    1b3c:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e2 0f       	add	r30, r18
    1b4c:	f3 1f       	adc	r31, r19
    1b4e:	90 81       	ld	r25, Z
    1b50:	8e 81       	ldd	r24, Y+6	; 0x06
    1b52:	89 0f       	add	r24, r25
    1b54:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <H_Lcd_Void_LCDWriteCommand>
}
    1b58:	26 96       	adiw	r28, 0x06	; 6
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <H_KeyPad_Void_KeyPadInit>:
	u8 Local_U8_ColCounter = 0;


/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    1b72:	83 e2       	ldi	r24, 0x23	; 35
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    1b7a:	82 e2       	ldi	r24, 0x22	; 34
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    1b82:	81 e2       	ldi	r24, 0x21	; 33
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    1b92:	83 e2       	ldi	r24, 0x23	; 35
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    1b9a:	82 e2       	ldi	r24, 0x22	; 34
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    1ba2:	81 e2       	ldi	r24, 0x21	; 33
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    1baa:	80 e2       	ldi	r24, 0x20	; 32
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    1bb2:	8f e2       	ldi	r24, 0x2F	; 47
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    1bba:	8e e2       	ldi	r24, 0x2E	; 46
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    1bc2:	8d e2       	ldi	r24, 0x2D	; 45
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    1bca:	8b e2       	ldi	r24, 0x2B	; 43
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	0e 94 2c 07 	call	0xe58	; 0xe58 <M_DIO_Void_SetPinDirection>
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	2f 97       	sbiw	r28, 0x0f	; 15
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61

	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    1bec:	10 92 a6 01 	sts	0x01A6, r1
    1bf0:	d5 c0       	rjmp	.+426    	; 0x1d9c <H_KeyPad_U8_KeyPadRead+0x1c4>
	{
		  M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    1bf2:	80 91 a6 01 	lds	r24, 0x01A6
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e3 57       	subi	r30, 0x73	; 115
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	80 81       	ld	r24, Z
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>


		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    1c08:	10 92 a7 01 	sts	0x01A7, r1
    1c0c:	b2 c0       	rjmp	.+356    	; 0x1d72 <H_KeyPad_U8_KeyPadRead+0x19a>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    1c0e:	80 91 a7 01 	lds	r24, 0x01A7
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	fc 01       	movw	r30, r24
    1c18:	ef 56       	subi	r30, 0x6F	; 111
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	80 81       	ld	r24, Z
    1c1e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <M_DIO_Void_GetPinValue>
    1c22:	88 23       	and	r24, r24
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <H_KeyPad_U8_KeyPadRead+0x50>
    1c26:	a0 c0       	rjmp	.+320    	; 0x1d68 <H_KeyPad_U8_KeyPadRead+0x190>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 ef       	ldi	r26, 0xF0	; 240
    1c2e:	b1 e4       	ldi	r27, 0x41	; 65
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <H_KeyPad_U8_KeyPadRead+0xa2>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <H_KeyPad_U8_KeyPadRead+0x120>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <H_KeyPad_U8_KeyPadRead+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <H_KeyPad_U8_KeyPadRead+0x102>
    1cbc:	89 e1       	ldi	r24, 0x19	; 25
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <H_KeyPad_U8_KeyPadRead+0xf0>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <H_KeyPad_U8_KeyPadRead+0xe4>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <H_KeyPad_U8_KeyPadRead+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <H_KeyPad_U8_KeyPadRead+0x12c>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    1d0c:	80 91 a7 01 	lds	r24, 0x01A7
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	ef 56       	subi	r30, 0x6F	; 111
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	80 81       	ld	r24, Z
    1d1c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <M_DIO_Void_GetPinValue>
    1d20:	88 23       	and	r24, r24
    1d22:	11 f5       	brne	.+68     	; 0x1d68 <H_KeyPad_U8_KeyPadRead+0x190>
				{
					 while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
    1d24:	80 91 a7 01 	lds	r24, 0x01A7
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	ef 56       	subi	r30, 0x6F	; 111
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	80 81       	ld	r24, Z
    1d34:	0e 94 58 09 	call	0x12b0	; 0x12b0 <M_DIO_Void_GetPinValue>
    1d38:	88 23       	and	r24, r24
    1d3a:	a1 f3       	breq	.-24     	; 0x1d24 <H_KeyPad_U8_KeyPadRead+0x14c>
					 return Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    1d3c:	80 91 a6 01 	lds	r24, 0x01A6
    1d40:	48 2f       	mov	r20, r24
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	80 91 a7 01 	lds	r24, 0x01A7
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	eb 56       	subi	r30, 0x6B	; 107
    1d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
		  M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);


	}

}
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <H_KeyPad_U8_KeyPadRead+0x1ce>
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		  M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);


		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    1d68:	80 91 a7 01 	lds	r24, 0x01A7
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	80 93 a7 01 	sts	0x01A7, r24
    1d72:	80 91 a7 01 	lds	r24, 0x01A7
    1d76:	84 30       	cpi	r24, 0x04	; 4
    1d78:	08 f4       	brcc	.+2      	; 0x1d7c <H_KeyPad_U8_KeyPadRead+0x1a4>
    1d7a:	49 cf       	rjmp	.-366    	; 0x1c0e <H_KeyPad_U8_KeyPadRead+0x36>
					 break;
				}

			}
		}
		  M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    1d7c:	80 91 a6 01 	lds	r24, 0x01A6
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	fc 01       	movw	r30, r24
    1d86:	e3 57       	subi	r30, 0x73	; 115
    1d88:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8a:	80 81       	ld	r24, Z
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	0e 94 42 08 	call	0x1084	; 0x1084 <M_DIO_Void_SetPinValue>
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{

	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    1d92:	80 91 a6 01 	lds	r24, 0x01A6
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	80 93 a6 01 	sts	0x01A6, r24
    1d9c:	80 91 a6 01 	lds	r24, 0x01A6
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <H_KeyPad_U8_KeyPadRead+0x1ce>
    1da4:	26 cf       	rjmp	.-436    	; 0x1bf2 <H_KeyPad_U8_KeyPadRead+0x1a>
		  M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);


	}

}
    1da6:	2f 96       	adiw	r28, 0x0f	; 15
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <createStack>:
/**
 * @brief  createStack function used to create the stack in heap
 * @param  capacity is passed to indicate the stack capacity in memory
 */
struct Stack* createStack(unsigned capacity)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <createStack+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <createStack+0x8>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <createStack+0xa>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
	struct Stack* stack
	= (struct Stack*)malloc(sizeof(struct Stack));
    1dca:	88 e0       	ldi	r24, 0x08	; 8
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <malloc>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01

	if (!stack)
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <createStack+0x2c>
		return NULL;
    1dde:	1e 82       	std	Y+6, r1	; 0x06
    1de0:	1d 82       	std	Y+5, r1	; 0x05
    1de2:	2b c0       	rjmp	.+86     	; 0x1e3a <createStack+0x82>

	stack->top = -1;
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	9f ef       	ldi	r25, 0xFF	; 255
    1dec:	af ef       	ldi	r26, 0xFF	; 255
    1dee:	bf ef       	ldi	r27, 0xFF	; 255
    1df0:	80 83       	st	Z, r24
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	a2 83       	std	Z+2, r26	; 0x02
    1df6:	b3 83       	std	Z+3, r27	; 0x03
	stack->capacity = capacity;
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	95 83       	std	Z+5, r25	; 0x05
    1e02:	84 83       	std	Z+4, r24	; 0x04
	stack->array
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	84 81       	ldd	r24, Z+4	; 0x04
    1e0a:	95 81       	ldd	r25, Z+5	; 0x05
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <malloc>
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	97 83       	std	Z+7, r25	; 0x07
    1e1e:	86 83       	std	Z+6, r24	; 0x06
	= (f32*)malloc(stack->capacity * sizeof(f32));

	if (!stack->array)
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	86 81       	ldd	r24, Z+6	; 0x06
    1e26:	97 81       	ldd	r25, Z+7	; 0x07
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	19 f4       	brne	.+6      	; 0x1e32 <createStack+0x7a>
		return NULL;
    1e2c:	1e 82       	std	Y+6, r1	; 0x06
    1e2e:	1d 82       	std	Y+5, r1	; 0x05
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <createStack+0x82>

	return stack;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1e3e:	26 96       	adiw	r28, 0x06	; 6
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <isEmpty>:
 * @brief  isEmpty function used to check weather or not the stack is empty
 * @param  pointer to the stack which allocated
 */

s32 isEmpty(struct Stack* stack)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <isEmpty+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <isEmpty+0x8>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <isEmpty+0xa>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
	return stack->top == -1;
    1e62:	e9 81       	ldd	r30, Y+1	; 0x01
    1e64:	fa 81       	ldd	r31, Y+2	; 0x02
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	a2 81       	ldd	r26, Z+2	; 0x02
    1e6c:	b3 81       	ldd	r27, Z+3	; 0x03
    1e6e:	1b 82       	std	Y+3, r1	; 0x03
    1e70:	1c 82       	std	Y+4, r1	; 0x04
    1e72:	1d 82       	std	Y+5, r1	; 0x05
    1e74:	1e 82       	std	Y+6, r1	; 0x06
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	2f ef       	ldi	r18, 0xFF	; 255
    1e7a:	92 07       	cpc	r25, r18
    1e7c:	2f ef       	ldi	r18, 0xFF	; 255
    1e7e:	a2 07       	cpc	r26, r18
    1e80:	2f ef       	ldi	r18, 0xFF	; 255
    1e82:	b2 07       	cpc	r27, r18
    1e84:	41 f4       	brne	.+16     	; 0x1e96 <isEmpty+0x46>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	ad 83       	std	Y+5, r26	; 0x05
    1e94:	be 83       	std	Y+6, r27	; 0x06
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	ad 81       	ldd	r26, Y+5	; 0x05
    1e9c:	be 81       	ldd	r27, Y+6	; 0x06
}
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	26 96       	adiw	r28, 0x06	; 6
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <peek>:

/**
 * @brief  peek function used to get the stack top
 */
f32 peek(struct Stack* stack)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <peek+0x6>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	return stack->array[stack-> top];
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	26 81       	ldd	r18, Z+6	; 0x06
    1ec8:	37 81       	ldd	r19, Z+7	; 0x07
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ed4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	f9 01       	movw	r30, r18
    1ee0:	e8 0f       	add	r30, r24
    1ee2:	f9 1f       	adc	r31, r25
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eea:	b3 81       	ldd	r27, Z+3	; 0x03
}
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <pop>:
 * param  pointer to the stack which allocated
 * return last in elemet

 */
f32 pop(struct Stack* stack)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <pop+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <pop+0x8>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <pop+0xa>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	if (!isEmpty(stack))
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <isEmpty>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	a1 05       	cpc	r26, r1
    1f1c:	b1 05       	cpc	r27, r1
    1f1e:	31 f5       	brne	.+76     	; 0x1f6c <pop+0x72>
		return stack->array[stack-> top--];
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	66 81       	ldd	r22, Z+6	; 0x06
    1f26:	77 81       	ldd	r23, Z+7	; 0x07
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	20 81       	ld	r18, Z
    1f2e:	31 81       	ldd	r19, Z+1	; 0x01
    1f30:	42 81       	ldd	r20, Z+2	; 0x02
    1f32:	53 81       	ldd	r21, Z+3	; 0x03
    1f34:	c9 01       	movw	r24, r18
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	fb 01       	movw	r30, r22
    1f40:	e8 0f       	add	r30, r24
    1f42:	f9 1f       	adc	r31, r25
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	a2 81       	ldd	r26, Z+2	; 0x02
    1f4a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	9c 83       	std	Y+4, r25	; 0x04
    1f50:	ad 83       	std	Y+5, r26	; 0x05
    1f52:	be 83       	std	Y+6, r27	; 0x06
    1f54:	da 01       	movw	r26, r20
    1f56:	c9 01       	movw	r24, r18
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	a1 09       	sbc	r26, r1
    1f5c:	b1 09       	sbc	r27, r1
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	80 83       	st	Z, r24
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	a2 83       	std	Z+2, r26	; 0x02
    1f68:	b3 83       	std	Z+3, r27	; 0x03
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <pop+0x82>
	return '$';
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e1       	ldi	r26, 0x10	; 16
    1f72:	b2 e4       	ldi	r27, 0x42	; 66
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	ad 83       	std	Y+5, r26	; 0x05
    1f7a:	be 83       	std	Y+6, r27	; 0x06
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	ad 81       	ldd	r26, Y+5	; 0x05
    1f82:	be 81       	ldd	r27, Y+6	; 0x06
}
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	26 96       	adiw	r28, 0x06	; 6
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <push>:
 * param  pointer to the stack which allocated
 * return void

 */
void push(struct Stack* stack, f32 op)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <push+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <push+0x8>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <push+0xa>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	4b 83       	std	Y+3, r20	; 0x03
    1fae:	5c 83       	std	Y+4, r21	; 0x04
    1fb0:	6d 83       	std	Y+5, r22	; 0x05
    1fb2:	7e 83       	std	Y+6, r23	; 0x06
	stack->array[++stack->top] = op;
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	26 81       	ldd	r18, Z+6	; 0x06
    1fba:	37 81       	ldd	r19, Z+7	; 0x07
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc6:	b3 81       	ldd	r27, Z+3	; 0x03
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	a1 1d       	adc	r26, r1
    1fcc:	b1 1d       	adc	r27, r1
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	80 83       	st	Z, r24
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	a2 83       	std	Z+2, r26	; 0x02
    1fd8:	b3 83       	std	Z+3, r27	; 0x03
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	f9 01       	movw	r30, r18
    1ff0:	e8 0f       	add	r30, r24
    1ff2:	f9 1f       	adc	r31, r25
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	ad 81       	ldd	r26, Y+5	; 0x05
    1ffa:	be 81       	ldd	r27, Y+6	; 0x06
    1ffc:	80 83       	st	Z, r24
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	a2 83       	std	Z+2, r26	; 0x02
    2002:	b3 83       	std	Z+3, r27	; 0x03
}
    2004:	26 96       	adiw	r28, 0x06	; 6
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <infixToPostfix>:
 * return postfix expression

 */

s8* infixToPostfix(s8* infix)
{
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	ca 57       	subi	r28, 0x7A	; 122
    2028:	d0 40       	sbci	r29, 0x00	; 0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	fe 01       	movw	r30, r28
    2036:	e9 58       	subi	r30, 0x89	; 137
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
	s32 i, j;
	s32 len = strlen(infix);
    203e:	fe 01       	movw	r30, r28
    2040:	e9 58       	subi	r30, 0x89	; 137
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <strlen>
    204c:	cc 01       	movw	r24, r24
    204e:	a0 e0       	ldi	r26, 0x00	; 0
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	8f 83       	std	Y+7, r24	; 0x07
    2054:	98 87       	std	Y+8, r25	; 0x08
    2056:	a9 87       	std	Y+9, r26	; 0x09
    2058:	ba 87       	std	Y+10, r27	; 0x0a
	s8* postfix = (s8*)malloc(sizeof(s8) * (len + 2));
    205a:	8f 81       	ldd	r24, Y+7	; 0x07
    205c:	98 85       	ldd	r25, Y+8	; 0x08
    205e:	02 96       	adiw	r24, 0x02	; 2
    2060:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <malloc>
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
	s8 stack[MAX_EXPR_SIZE];
	s32 top = -1;
    2068:	8f ef       	ldi	r24, 0xFF	; 255
    206a:	9f ef       	ldi	r25, 0xFF	; 255
    206c:	af ef       	ldi	r26, 0xFF	; 255
    206e:	bf ef       	ldi	r27, 0xFF	; 255
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	ab 83       	std	Y+3, r26	; 0x03
    2076:	bc 83       	std	Y+4, r27	; 0x04

	for (i = 0, j = 0; i < len; i++)
    2078:	1f 86       	std	Y+15, r1	; 0x0f
    207a:	18 8a       	std	Y+16, r1	; 0x10
    207c:	19 8a       	std	Y+17, r1	; 0x11
    207e:	1a 8a       	std	Y+18, r1	; 0x12
    2080:	1b 86       	std	Y+11, r1	; 0x0b
    2082:	1c 86       	std	Y+12, r1	; 0x0c
    2084:	1d 86       	std	Y+13, r1	; 0x0d
    2086:	1e 86       	std	Y+14, r1	; 0x0e
    2088:	ab c1       	rjmp	.+854    	; 0x23e0 <infixToPostfix+0x3ca>
	{
		if (infix[i] == ' ' || infix[i] == '\t')
    208a:	2f 85       	ldd	r18, Y+15	; 0x0f
    208c:	38 89       	ldd	r19, Y+16	; 0x10
    208e:	fe 01       	movw	r30, r28
    2090:	e9 58       	subi	r30, 0x89	; 137
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	fc 01       	movw	r30, r24
    209a:	e2 0f       	add	r30, r18
    209c:	f3 1f       	adc	r31, r19
    209e:	80 81       	ld	r24, Z
    20a0:	80 32       	cpi	r24, 0x20	; 32
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <infixToPostfix+0x90>
    20a4:	92 c1       	rjmp	.+804    	; 0x23ca <infixToPostfix+0x3b4>
    20a6:	2f 85       	ldd	r18, Y+15	; 0x0f
    20a8:	38 89       	ldd	r19, Y+16	; 0x10
    20aa:	fe 01       	movw	r30, r28
    20ac:	e9 58       	subi	r30, 0x89	; 137
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	80 81       	ld	r24, Z
    20bc:	89 30       	cpi	r24, 0x09	; 9
    20be:	09 f4       	brne	.+2      	; 0x20c2 <infixToPostfix+0xac>
    20c0:	84 c1       	rjmp	.+776    	; 0x23ca <infixToPostfix+0x3b4>
			continue;

		// If the scanned charcter is operand
		// add it to the postfix expression
		if (isalnum(infix[i])||infix[i]=='.')
    20c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    20c4:	38 89       	ldd	r19, Y+16	; 0x10
    20c6:	fe 01       	movw	r30, r28
    20c8:	e9 58       	subi	r30, 0x89	; 137
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	80 81       	ld	r24, Z
    20d8:	99 27       	eor	r25, r25
    20da:	87 fd       	sbrc	r24, 7
    20dc:	90 95       	com	r25
    20de:	0e 94 31 17 	call	0x2e62	; 0x2e62 <isalnum>
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f4       	brne	.+26     	; 0x2100 <infixToPostfix+0xea>
    20e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    20e8:	38 89       	ldd	r19, Y+16	; 0x10
    20ea:	fe 01       	movw	r30, r28
    20ec:	e9 58       	subi	r30, 0x89	; 137
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	fc 01       	movw	r30, r24
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	80 81       	ld	r24, Z
    20fc:	8e 32       	cpi	r24, 0x2E	; 46
    20fe:	f9 f4       	brne	.+62     	; 0x213e <infixToPostfix+0x128>
		{
			postfix[j++] = infix[i];
    2100:	2b 85       	ldd	r18, Y+11	; 0x0b
    2102:	3c 85       	ldd	r19, Y+12	; 0x0c
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	dc 01       	movw	r26, r24
    210a:	a2 0f       	add	r26, r18
    210c:	b3 1f       	adc	r27, r19
    210e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2110:	38 89       	ldd	r19, Y+16	; 0x10
    2112:	fe 01       	movw	r30, r28
    2114:	e9 58       	subi	r30, 0x89	; 137
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	fc 01       	movw	r30, r24
    211e:	e2 0f       	add	r30, r18
    2120:	f3 1f       	adc	r31, r19
    2122:	80 81       	ld	r24, Z
    2124:	8c 93       	st	X, r24
    2126:	8b 85       	ldd	r24, Y+11	; 0x0b
    2128:	9c 85       	ldd	r25, Y+12	; 0x0c
    212a:	ad 85       	ldd	r26, Y+13	; 0x0d
    212c:	be 85       	ldd	r27, Y+14	; 0x0e
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	8b 87       	std	Y+11, r24	; 0x0b
    2136:	9c 87       	std	Y+12, r25	; 0x0c
    2138:	ad 87       	std	Y+13, r26	; 0x0d
    213a:	be 87       	std	Y+14, r27	; 0x0e
    213c:	46 c1       	rjmp	.+652    	; 0x23ca <infixToPostfix+0x3b4>
		}

		// if the scanned charcter is '('
		// push it in the stack
		else if (infix[i] == '(')
    213e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2140:	38 89       	ldd	r19, Y+16	; 0x10
    2142:	fe 01       	movw	r30, r28
    2144:	e9 58       	subi	r30, 0x89	; 137
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	80 81       	ld	r24, Z
    2154:	88 32       	cpi	r24, 0x28	; 40
    2156:	09 f5       	brne	.+66     	; 0x219a <infixToPostfix+0x184>
		{
			stack[++top] = infix[i];
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	ab 81       	ldd	r26, Y+3	; 0x03
    215e:	bc 81       	ldd	r27, Y+4	; 0x04
    2160:	01 96       	adiw	r24, 0x01	; 1
    2162:	a1 1d       	adc	r26, r1
    2164:	b1 1d       	adc	r27, r1
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	ab 83       	std	Y+3, r26	; 0x03
    216c:	bc 83       	std	Y+4, r27	; 0x04
    216e:	49 81       	ldd	r20, Y+1	; 0x01
    2170:	5a 81       	ldd	r21, Y+2	; 0x02
    2172:	6b 81       	ldd	r22, Y+3	; 0x03
    2174:	7c 81       	ldd	r23, Y+4	; 0x04
    2176:	2f 85       	ldd	r18, Y+15	; 0x0f
    2178:	38 89       	ldd	r19, Y+16	; 0x10
    217a:	fe 01       	movw	r30, r28
    217c:	e9 58       	subi	r30, 0x89	; 137
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	fc 01       	movw	r30, r24
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	20 81       	ld	r18, Z
    218c:	ce 01       	movw	r24, r28
    218e:	43 96       	adiw	r24, 0x13	; 19
    2190:	fc 01       	movw	r30, r24
    2192:	e4 0f       	add	r30, r20
    2194:	f5 1f       	adc	r31, r21
    2196:	20 83       	st	Z, r18
    2198:	18 c1       	rjmp	.+560    	; 0x23ca <infixToPostfix+0x3b4>
		}

	 	// if the scanned charcter is ')'
		// pop the stack and add it to the
		// output string until empty or '(' found
		else if (infix[i] == ')')
    219a:	2f 85       	ldd	r18, Y+15	; 0x0f
    219c:	38 89       	ldd	r19, Y+16	; 0x10
    219e:	fe 01       	movw	r30, r28
    21a0:	e9 58       	subi	r30, 0x89	; 137
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 81       	ld	r24, Z
    21a6:	91 81       	ldd	r25, Z+1	; 0x01
    21a8:	fc 01       	movw	r30, r24
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	80 81       	ld	r24, Z
    21b0:	89 32       	cpi	r24, 0x29	; 41
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <infixToPostfix+0x1a0>
    21b4:	64 c0       	rjmp	.+200    	; 0x227e <infixToPostfix+0x268>
    21b6:	2a c0       	rjmp	.+84     	; 0x220c <infixToPostfix+0x1f6>
		{
			while (top > -1 && stack[top] != '(')
				postfix[j++] = stack[top--];
    21b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    21ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	ac 01       	movw	r20, r24
    21c2:	42 0f       	add	r20, r18
    21c4:	53 1f       	adc	r21, r19
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	ab 81       	ldd	r26, Y+3	; 0x03
    21cc:	bc 81       	ldd	r27, Y+4	; 0x04
    21ce:	9e 01       	movw	r18, r28
    21d0:	2d 5e       	subi	r18, 0xED	; 237
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	f9 01       	movw	r30, r18
    21d6:	e8 0f       	add	r30, r24
    21d8:	f9 1f       	adc	r31, r25
    21da:	80 81       	ld	r24, Z
    21dc:	fa 01       	movw	r30, r20
    21de:	80 83       	st	Z, r24
    21e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21e4:	ad 85       	ldd	r26, Y+13	; 0x0d
    21e6:	be 85       	ldd	r27, Y+14	; 0x0e
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	a1 1d       	adc	r26, r1
    21ec:	b1 1d       	adc	r27, r1
    21ee:	8b 87       	std	Y+11, r24	; 0x0b
    21f0:	9c 87       	std	Y+12, r25	; 0x0c
    21f2:	ad 87       	std	Y+13, r26	; 0x0d
    21f4:	be 87       	std	Y+14, r27	; 0x0e
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	ab 81       	ldd	r26, Y+3	; 0x03
    21fc:	bc 81       	ldd	r27, Y+4	; 0x04
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	a1 09       	sbc	r26, r1
    2202:	b1 09       	sbc	r27, r1
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	ab 83       	std	Y+3, r26	; 0x03
    220a:	bc 83       	std	Y+4, r27	; 0x04
	 	// if the scanned charcter is ')'
		// pop the stack and add it to the
		// output string until empty or '(' found
		else if (infix[i] == ')')
		{
			while (top > -1 && stack[top] != '(')
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	ab 81       	ldd	r26, Y+3	; 0x03
    2212:	bc 81       	ldd	r27, Y+4	; 0x04
    2214:	bb 23       	and	r27, r27
    2216:	6c f0       	brlt	.+26     	; 0x2232 <infixToPostfix+0x21c>
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	ab 81       	ldd	r26, Y+3	; 0x03
    221e:	bc 81       	ldd	r27, Y+4	; 0x04
    2220:	9e 01       	movw	r18, r28
    2222:	2d 5e       	subi	r18, 0xED	; 237
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	f9 01       	movw	r30, r18
    2228:	e8 0f       	add	r30, r24
    222a:	f9 1f       	adc	r31, r25
    222c:	80 81       	ld	r24, Z
    222e:	88 32       	cpi	r24, 0x28	; 40
    2230:	19 f6       	brne	.-122    	; 0x21b8 <infixToPostfix+0x1a2>
				postfix[j++] = stack[top--];
			if (top > -1 && stack[top] != '(')
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	ab 81       	ldd	r26, Y+3	; 0x03
    2238:	bc 81       	ldd	r27, Y+4	; 0x04
    223a:	bb 23       	and	r27, r27
    223c:	a4 f0       	brlt	.+40     	; 0x2266 <infixToPostfix+0x250>
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	ab 81       	ldd	r26, Y+3	; 0x03
    2244:	bc 81       	ldd	r27, Y+4	; 0x04
    2246:	9e 01       	movw	r18, r28
    2248:	2d 5e       	subi	r18, 0xED	; 237
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	f9 01       	movw	r30, r18
    224e:	e8 0f       	add	r30, r24
    2250:	f9 1f       	adc	r31, r25
    2252:	80 81       	ld	r24, Z
    2254:	88 32       	cpi	r24, 0x28	; 40
    2256:	39 f0       	breq	.+14     	; 0x2266 <infixToPostfix+0x250>
				return "Invalid Expression";
    2258:	82 e6       	ldi	r24, 0x62	; 98
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	eb 96       	adiw	r28, 0x3b	; 59
    225e:	9f af       	std	Y+63, r25	; 0x3f
    2260:	8e af       	std	Y+62, r24	; 0x3e
    2262:	eb 97       	sbiw	r28, 0x3b	; 59
    2264:	1f c1       	rjmp	.+574    	; 0x24a4 <infixToPostfix+0x48e>
			else
				top--;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	ab 81       	ldd	r26, Y+3	; 0x03
    226c:	bc 81       	ldd	r27, Y+4	; 0x04
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	a1 09       	sbc	r26, r1
    2272:	b1 09       	sbc	r27, r1
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	ab 83       	std	Y+3, r26	; 0x03
    227a:	bc 83       	std	Y+4, r27	; 0x04
    227c:	a6 c0       	rjmp	.+332    	; 0x23ca <infixToPostfix+0x3b4>
		}


		else if (isOperator(infix[i]))
    227e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2280:	38 89       	ldd	r19, Y+16	; 0x10
    2282:	fe 01       	movw	r30, r28
    2284:	e9 58       	subi	r30, 0x89	; 137
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	fc 01       	movw	r30, r24
    228e:	e2 0f       	add	r30, r18
    2290:	f3 1f       	adc	r31, r19
    2292:	80 81       	ld	r24, Z
    2294:	0e 94 a5 14 	call	0x294a	; 0x294a <isOperator>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <infixToPostfix+0x290>
    22a4:	92 c0       	rjmp	.+292    	; 0x23ca <infixToPostfix+0x3b4>
		{

			postfix[j] = ' ';
    22a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    22a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 e2       	ldi	r24, 0x20	; 32
    22b6:	80 83       	st	Z, r24
			postfix[++j] = ' ';
    22b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    22bc:	ad 85       	ldd	r26, Y+13	; 0x0d
    22be:	be 85       	ldd	r27, Y+14	; 0x0e
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	a1 1d       	adc	r26, r1
    22c4:	b1 1d       	adc	r27, r1
    22c6:	8b 87       	std	Y+11, r24	; 0x0b
    22c8:	9c 87       	std	Y+12, r25	; 0x0c
    22ca:	ad 87       	std	Y+13, r26	; 0x0d
    22cc:	be 87       	std	Y+14, r27	; 0x0e
    22ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    22d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	fc 01       	movw	r30, r24
    22d8:	e2 0f       	add	r30, r18
    22da:	f3 1f       	adc	r31, r19
    22dc:	80 e2       	ldi	r24, 0x20	; 32
    22de:	80 83       	st	Z, r24
    22e0:	2a c0       	rjmp	.+84     	; 0x2336 <infixToPostfix+0x320>

			while (top > -1&& precedence(stack[top])>= precedence(infix[i]))
			{

				postfix[j++] = stack[top--];
    22e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    22e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	ac 01       	movw	r20, r24
    22ec:	42 0f       	add	r20, r18
    22ee:	53 1f       	adc	r21, r19
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	ab 81       	ldd	r26, Y+3	; 0x03
    22f6:	bc 81       	ldd	r27, Y+4	; 0x04
    22f8:	9e 01       	movw	r18, r28
    22fa:	2d 5e       	subi	r18, 0xED	; 237
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	f9 01       	movw	r30, r18
    2300:	e8 0f       	add	r30, r24
    2302:	f9 1f       	adc	r31, r25
    2304:	80 81       	ld	r24, Z
    2306:	fa 01       	movw	r30, r20
    2308:	80 83       	st	Z, r24
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	9c 85       	ldd	r25, Y+12	; 0x0c
    230e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2310:	be 85       	ldd	r27, Y+14	; 0x0e
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	a1 1d       	adc	r26, r1
    2316:	b1 1d       	adc	r27, r1
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	ab 81       	ldd	r26, Y+3	; 0x03
    2326:	bc 81       	ldd	r27, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	a1 09       	sbc	r26, r1
    232c:	b1 09       	sbc	r27, r1
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	ab 83       	std	Y+3, r26	; 0x03
    2334:	bc 83       	std	Y+4, r27	; 0x04
		{

			postfix[j] = ' ';
			postfix[++j] = ' ';

			while (top > -1&& precedence(stack[top])>= precedence(infix[i]))
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	ab 81       	ldd	r26, Y+3	; 0x03
    233c:	bc 81       	ldd	r27, Y+4	; 0x04
    233e:	bb 23       	and	r27, r27
    2340:	24 f1       	brlt	.+72     	; 0x238a <infixToPostfix+0x374>
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	ab 81       	ldd	r26, Y+3	; 0x03
    2348:	bc 81       	ldd	r27, Y+4	; 0x04
    234a:	9e 01       	movw	r18, r28
    234c:	2d 5e       	subi	r18, 0xED	; 237
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	f9 01       	movw	r30, r18
    2352:	e8 0f       	add	r30, r24
    2354:	f9 1f       	adc	r31, r25
    2356:	80 81       	ld	r24, Z
    2358:	0e 94 41 14 	call	0x2882	; 0x2882 <precedence>
    235c:	7b 01       	movw	r14, r22
    235e:	8c 01       	movw	r16, r24
    2360:	2f 85       	ldd	r18, Y+15	; 0x0f
    2362:	38 89       	ldd	r19, Y+16	; 0x10
    2364:	fe 01       	movw	r30, r28
    2366:	e9 58       	subi	r30, 0x89	; 137
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	80 81       	ld	r24, Z
    2376:	0e 94 41 14 	call	0x2882	; 0x2882 <precedence>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	e8 16       	cp	r14, r24
    2380:	f9 06       	cpc	r15, r25
    2382:	0a 07       	cpc	r16, r26
    2384:	1b 07       	cpc	r17, r27
    2386:	0c f0       	brlt	.+2      	; 0x238a <infixToPostfix+0x374>
    2388:	ac cf       	rjmp	.-168    	; 0x22e2 <infixToPostfix+0x2cc>

				postfix[j++] = stack[top--];

			}

			stack[++top] = infix[i];
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	ab 81       	ldd	r26, Y+3	; 0x03
    2390:	bc 81       	ldd	r27, Y+4	; 0x04
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	a1 1d       	adc	r26, r1
    2396:	b1 1d       	adc	r27, r1
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	ab 83       	std	Y+3, r26	; 0x03
    239e:	bc 83       	std	Y+4, r27	; 0x04
    23a0:	49 81       	ldd	r20, Y+1	; 0x01
    23a2:	5a 81       	ldd	r21, Y+2	; 0x02
    23a4:	6b 81       	ldd	r22, Y+3	; 0x03
    23a6:	7c 81       	ldd	r23, Y+4	; 0x04
    23a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    23aa:	38 89       	ldd	r19, Y+16	; 0x10
    23ac:	fe 01       	movw	r30, r28
    23ae:	e9 58       	subi	r30, 0x89	; 137
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	20 81       	ld	r18, Z
    23be:	ce 01       	movw	r24, r28
    23c0:	43 96       	adiw	r24, 0x13	; 19
    23c2:	fc 01       	movw	r30, r24
    23c4:	e4 0f       	add	r30, r20
    23c6:	f5 1f       	adc	r31, r21
    23c8:	20 83       	st	Z, r18
	s32 len = strlen(infix);
	s8* postfix = (s8*)malloc(sizeof(s8) * (len + 2));
	s8 stack[MAX_EXPR_SIZE];
	s32 top = -1;

	for (i = 0, j = 0; i < len; i++)
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	98 89       	ldd	r25, Y+16	; 0x10
    23ce:	a9 89       	ldd	r26, Y+17	; 0x11
    23d0:	ba 89       	ldd	r27, Y+18	; 0x12
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	a1 1d       	adc	r26, r1
    23d6:	b1 1d       	adc	r27, r1
    23d8:	8f 87       	std	Y+15, r24	; 0x0f
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	a9 8b       	std	Y+17, r26	; 0x11
    23de:	ba 8b       	std	Y+18, r27	; 0x12
    23e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    23e2:	38 89       	ldd	r19, Y+16	; 0x10
    23e4:	49 89       	ldd	r20, Y+17	; 0x11
    23e6:	5a 89       	ldd	r21, Y+18	; 0x12
    23e8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ea:	98 85       	ldd	r25, Y+8	; 0x08
    23ec:	a9 85       	ldd	r26, Y+9	; 0x09
    23ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    23f0:	28 17       	cp	r18, r24
    23f2:	39 07       	cpc	r19, r25
    23f4:	4a 07       	cpc	r20, r26
    23f6:	5b 07       	cpc	r21, r27
    23f8:	0c f4       	brge	.+2      	; 0x23fc <infixToPostfix+0x3e6>
    23fa:	47 ce       	rjmp	.-882    	; 0x208a <infixToPostfix+0x74>
    23fc:	3e c0       	rjmp	.+124    	; 0x247a <infixToPostfix+0x464>
	}

	// Pop all remaining elements from the stack
	while (top > -1)
	{
		if (stack[top] == '(')
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	ab 81       	ldd	r26, Y+3	; 0x03
    2404:	bc 81       	ldd	r27, Y+4	; 0x04
    2406:	9e 01       	movw	r18, r28
    2408:	2d 5e       	subi	r18, 0xED	; 237
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	f9 01       	movw	r30, r18
    240e:	e8 0f       	add	r30, r24
    2410:	f9 1f       	adc	r31, r25
    2412:	80 81       	ld	r24, Z
    2414:	88 32       	cpi	r24, 0x28	; 40
    2416:	39 f4       	brne	.+14     	; 0x2426 <infixToPostfix+0x410>
		{
			return "Invalid Expression";
    2418:	82 e6       	ldi	r24, 0x62	; 98
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	eb 96       	adiw	r28, 0x3b	; 59
    241e:	9f af       	std	Y+63, r25	; 0x3f
    2420:	8e af       	std	Y+62, r24	; 0x3e
    2422:	eb 97       	sbiw	r28, 0x3b	; 59
    2424:	3f c0       	rjmp	.+126    	; 0x24a4 <infixToPostfix+0x48e>
		}
		postfix[j++] = stack[top--];
    2426:	2b 85       	ldd	r18, Y+11	; 0x0b
    2428:	3c 85       	ldd	r19, Y+12	; 0x0c
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	ac 01       	movw	r20, r24
    2430:	42 0f       	add	r20, r18
    2432:	53 1f       	adc	r21, r19
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	ab 81       	ldd	r26, Y+3	; 0x03
    243a:	bc 81       	ldd	r27, Y+4	; 0x04
    243c:	9e 01       	movw	r18, r28
    243e:	2d 5e       	subi	r18, 0xED	; 237
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	f9 01       	movw	r30, r18
    2444:	e8 0f       	add	r30, r24
    2446:	f9 1f       	adc	r31, r25
    2448:	80 81       	ld	r24, Z
    244a:	fa 01       	movw	r30, r20
    244c:	80 83       	st	Z, r24
    244e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2450:	9c 85       	ldd	r25, Y+12	; 0x0c
    2452:	ad 85       	ldd	r26, Y+13	; 0x0d
    2454:	be 85       	ldd	r27, Y+14	; 0x0e
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	a1 1d       	adc	r26, r1
    245a:	b1 1d       	adc	r27, r1
    245c:	8b 87       	std	Y+11, r24	; 0x0b
    245e:	9c 87       	std	Y+12, r25	; 0x0c
    2460:	ad 87       	std	Y+13, r26	; 0x0d
    2462:	be 87       	std	Y+14, r27	; 0x0e
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	ab 81       	ldd	r26, Y+3	; 0x03
    246a:	bc 81       	ldd	r27, Y+4	; 0x04
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	a1 09       	sbc	r26, r1
    2470:	b1 09       	sbc	r27, r1
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	ab 83       	std	Y+3, r26	; 0x03
    2478:	bc 83       	std	Y+4, r27	; 0x04
			stack[++top] = infix[i];
		}
	}

	// Pop all remaining elements from the stack
	while (top > -1)
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	ab 81       	ldd	r26, Y+3	; 0x03
    2480:	bc 81       	ldd	r27, Y+4	; 0x04
    2482:	bb 23       	and	r27, r27
    2484:	0c f0       	brlt	.+2      	; 0x2488 <infixToPostfix+0x472>
    2486:	bb cf       	rjmp	.-138    	; 0x23fe <infixToPostfix+0x3e8>
		{
			return "Invalid Expression";
		}
		postfix[j++] = stack[top--];
	}
	postfix[j] = '\0';
    2488:	8b 85       	ldd	r24, Y+11	; 0x0b
    248a:	9c 85       	ldd	r25, Y+12	; 0x0c
    248c:	2d 81       	ldd	r18, Y+5	; 0x05
    248e:	3e 81       	ldd	r19, Y+6	; 0x06
    2490:	f9 01       	movw	r30, r18
    2492:	e8 0f       	add	r30, r24
    2494:	f9 1f       	adc	r31, r25
    2496:	10 82       	st	Z, r1
	return postfix;
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	eb 96       	adiw	r28, 0x3b	; 59
    249e:	9f af       	std	Y+63, r25	; 0x3f
    24a0:	8e af       	std	Y+62, r24	; 0x3e
    24a2:	eb 97       	sbiw	r28, 0x3b	; 59
    24a4:	eb 96       	adiw	r28, 0x3b	; 59
    24a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    24a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    24aa:	eb 97       	sbiw	r28, 0x3b	; 59
}
    24ac:	c6 58       	subi	r28, 0x86	; 134
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	08 95       	ret

000024c8 <evaluatePostfix>:
 * return the expression value

 */

f32 evaluatePostfix(s8* exp)
{
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	6b 97       	sbiw	r28, 0x1b	; 27
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	9d 8b       	std	Y+21, r25	; 0x15
    24e6:	8c 8b       	std	Y+20, r24	; 0x14
	// Create a stack of capacity equal to expression size
	struct Stack* stack = createStack(strlen(exp));
    24e8:	8c 89       	ldd	r24, Y+20	; 0x14
    24ea:	9d 89       	ldd	r25, Y+21	; 0x15
    24ec:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <strlen>
    24f0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <createStack>
    24f4:	9b 8b       	std	Y+19, r25	; 0x13
    24f6:	8a 8b       	std	Y+18, r24	; 0x12
	s32 i;

	// See if stack was created successfully
	if (!stack)
    24f8:	8a 89       	ldd	r24, Y+18	; 0x12
    24fa:	9b 89       	ldd	r25, Y+19	; 0x13
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	49 f4       	brne	.+18     	; 0x2512 <evaluatePostfix+0x4a>
		return -1;
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e8       	ldi	r26, 0x80	; 128
    2506:	bf eb       	ldi	r27, 0xBF	; 191
    2508:	88 8f       	std	Y+24, r24	; 0x18
    250a:	99 8f       	std	Y+25, r25	; 0x19
    250c:	aa 8f       	std	Y+26, r26	; 0x1a
    250e:	bb 8f       	std	Y+27, r27	; 0x1b
    2510:	a5 c1       	rjmp	.+842    	; 0x285c <evaluatePostfix+0x394>

	// Scan all character one by one
	for (i = 0; exp[i]; ++i) {
    2512:	1e 86       	std	Y+14, r1	; 0x0e
    2514:	1f 86       	std	Y+15, r1	; 0x0f
    2516:	18 8a       	std	Y+16, r1	; 0x10
    2518:	19 8a       	std	Y+17, r1	; 0x11
    251a:	8b c1       	rjmp	.+790    	; 0x2832 <evaluatePostfix+0x36a>
		// if the character is blank space then continue
		if (exp[i] == ' ')
    251c:	2e 85       	ldd	r18, Y+14	; 0x0e
    251e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2520:	8c 89       	ldd	r24, Y+20	; 0x14
    2522:	9d 89       	ldd	r25, Y+21	; 0x15
    2524:	fc 01       	movw	r30, r24
    2526:	e2 0f       	add	r30, r18
    2528:	f3 1f       	adc	r31, r19
    252a:	80 81       	ld	r24, Z
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	09 f4       	brne	.+2      	; 0x2532 <evaluatePostfix+0x6a>
    2530:	75 c1       	rjmp	.+746    	; 0x281c <evaluatePostfix+0x354>
			continue;

		// If the scanned character is an
		// operand (number here),extract the full number
		// Push it to the stack.
		else if (isdigit(exp[i])||exp[i]=='.') {
    2532:	2e 85       	ldd	r18, Y+14	; 0x0e
    2534:	3f 85       	ldd	r19, Y+15	; 0x0f
    2536:	8c 89       	ldd	r24, Y+20	; 0x14
    2538:	9d 89       	ldd	r25, Y+21	; 0x15
    253a:	fc 01       	movw	r30, r24
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	80 81       	ld	r24, Z
    2542:	99 27       	eor	r25, r25
    2544:	87 fd       	sbrc	r24, 7
    2546:	90 95       	com	r25
    2548:	c0 97       	sbiw	r24, 0x30	; 48
    254a:	8a 30       	cpi	r24, 0x0A	; 10
    254c:	91 05       	cpc	r25, r1
    254e:	58 f0       	brcs	.+22     	; 0x2566 <evaluatePostfix+0x9e>
    2550:	2e 85       	ldd	r18, Y+14	; 0x0e
    2552:	3f 85       	ldd	r19, Y+15	; 0x0f
    2554:	8c 89       	ldd	r24, Y+20	; 0x14
    2556:	9d 89       	ldd	r25, Y+21	; 0x15
    2558:	fc 01       	movw	r30, r24
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	80 81       	ld	r24, Z
    2560:	8e 32       	cpi	r24, 0x2E	; 46
    2562:	09 f0       	breq	.+2      	; 0x2566 <evaluatePostfix+0x9e>
    2564:	ca c0       	rjmp	.+404    	; 0x26fa <evaluatePostfix+0x232>
			f32 num = 0;
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e0       	ldi	r26, 0x00	; 0
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	8a 87       	std	Y+10, r24	; 0x0a
    2570:	9b 87       	std	Y+11, r25	; 0x0b
    2572:	ac 87       	std	Y+12, r26	; 0x0c
    2574:	bd 87       	std	Y+13, r27	; 0x0d
u8 flag=0;
    2576:	19 86       	std	Y+9, r1	; 0x09
    2578:	8f c0       	rjmp	.+286    	; 0x2698 <evaluatePostfix+0x1d0>
			// extract full number
			while (isdigit(exp[i])||exp[i]=='.') {
				if(exp[i]=='.'){
    257a:	2e 85       	ldd	r18, Y+14	; 0x0e
    257c:	3f 85       	ldd	r19, Y+15	; 0x0f
    257e:	8c 89       	ldd	r24, Y+20	; 0x14
    2580:	9d 89       	ldd	r25, Y+21	; 0x15
    2582:	fc 01       	movw	r30, r24
    2584:	e2 0f       	add	r30, r18
    2586:	f3 1f       	adc	r31, r19
    2588:	80 81       	ld	r24, Z
    258a:	8e 32       	cpi	r24, 0x2E	; 46
    258c:	71 f4       	brne	.+28     	; 0x25aa <evaluatePostfix+0xe2>
					flag=1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	89 87       	std	Y+9, r24	; 0x09
					i++;
    2592:	8e 85       	ldd	r24, Y+14	; 0x0e
    2594:	9f 85       	ldd	r25, Y+15	; 0x0f
    2596:	a8 89       	ldd	r26, Y+16	; 0x10
    2598:	b9 89       	ldd	r27, Y+17	; 0x11
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	a1 1d       	adc	r26, r1
    259e:	b1 1d       	adc	r27, r1
    25a0:	8e 87       	std	Y+14, r24	; 0x0e
    25a2:	9f 87       	std	Y+15, r25	; 0x0f
    25a4:	a8 8b       	std	Y+16, r26	; 0x10
    25a6:	b9 8b       	std	Y+17, r27	; 0x11
    25a8:	77 c0       	rjmp	.+238    	; 0x2698 <evaluatePostfix+0x1d0>
					continue;
				}
				if(flag==1){
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	c1 f5       	brne	.+112    	; 0x2620 <evaluatePostfix+0x158>
					num = (num * 10 + (f32)(exp[i] - '0'))/10;
    25b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    25b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    25b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    25b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	7c 01       	movw	r14, r24
    25ca:	8d 01       	movw	r16, r26
    25cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    25ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    25d0:	8c 89       	ldd	r24, Y+20	; 0x14
    25d2:	9d 89       	ldd	r25, Y+21	; 0x15
    25d4:	fc 01       	movw	r30, r24
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	80 81       	ld	r24, Z
    25dc:	99 27       	eor	r25, r25
    25de:	87 fd       	sbrc	r24, 7
    25e0:	90 95       	com	r25
    25e2:	c0 97       	sbiw	r24, 0x30	; 48
    25e4:	aa 27       	eor	r26, r26
    25e6:	97 fd       	sbrc	r25, 7
    25e8:	a0 95       	com	r26
    25ea:	ba 2f       	mov	r27, r26
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    25f4:	9b 01       	movw	r18, r22
    25f6:	ac 01       	movw	r20, r24
    25f8:	c8 01       	movw	r24, r16
    25fa:	b7 01       	movw	r22, r14
    25fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8a 87       	std	Y+10, r24	; 0x0a
    261a:	9b 87       	std	Y+11, r25	; 0x0b
    261c:	ac 87       	std	Y+12, r26	; 0x0c
    261e:	bd 87       	std	Y+13, r27	; 0x0d
				}
				if(flag==0){
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	88 23       	and	r24, r24
    2624:	71 f5       	brne	.+92     	; 0x2682 <evaluatePostfix+0x1ba>
				num = num * 10 + (f32)(exp[i] - '0');
    2626:	6a 85       	ldd	r22, Y+10	; 0x0a
    2628:	7b 85       	ldd	r23, Y+11	; 0x0b
    262a:	8c 85       	ldd	r24, Y+12	; 0x0c
    262c:	9d 85       	ldd	r25, Y+13	; 0x0d
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	7c 01       	movw	r14, r24
    2640:	8d 01       	movw	r16, r26
    2642:	2e 85       	ldd	r18, Y+14	; 0x0e
    2644:	3f 85       	ldd	r19, Y+15	; 0x0f
    2646:	8c 89       	ldd	r24, Y+20	; 0x14
    2648:	9d 89       	ldd	r25, Y+21	; 0x15
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	80 81       	ld	r24, Z
    2652:	99 27       	eor	r25, r25
    2654:	87 fd       	sbrc	r24, 7
    2656:	90 95       	com	r25
    2658:	c0 97       	sbiw	r24, 0x30	; 48
    265a:	aa 27       	eor	r26, r26
    265c:	97 fd       	sbrc	r25, 7
    265e:	a0 95       	com	r26
    2660:	ba 2f       	mov	r27, r26
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	c8 01       	movw	r24, r16
    2670:	b7 01       	movw	r22, r14
    2672:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8a 87       	std	Y+10, r24	; 0x0a
    267c:	9b 87       	std	Y+11, r25	; 0x0b
    267e:	ac 87       	std	Y+12, r26	; 0x0c
    2680:	bd 87       	std	Y+13, r27	; 0x0d
				}
				i++;
    2682:	8e 85       	ldd	r24, Y+14	; 0x0e
    2684:	9f 85       	ldd	r25, Y+15	; 0x0f
    2686:	a8 89       	ldd	r26, Y+16	; 0x10
    2688:	b9 89       	ldd	r27, Y+17	; 0x11
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	a1 1d       	adc	r26, r1
    268e:	b1 1d       	adc	r27, r1
    2690:	8e 87       	std	Y+14, r24	; 0x0e
    2692:	9f 87       	std	Y+15, r25	; 0x0f
    2694:	a8 8b       	std	Y+16, r26	; 0x10
    2696:	b9 8b       	std	Y+17, r27	; 0x11
		// Push it to the stack.
		else if (isdigit(exp[i])||exp[i]=='.') {
			f32 num = 0;
u8 flag=0;
			// extract full number
			while (isdigit(exp[i])||exp[i]=='.') {
    2698:	2e 85       	ldd	r18, Y+14	; 0x0e
    269a:	3f 85       	ldd	r19, Y+15	; 0x0f
    269c:	8c 89       	ldd	r24, Y+20	; 0x14
    269e:	9d 89       	ldd	r25, Y+21	; 0x15
    26a0:	fc 01       	movw	r30, r24
    26a2:	e2 0f       	add	r30, r18
    26a4:	f3 1f       	adc	r31, r19
    26a6:	80 81       	ld	r24, Z
    26a8:	99 27       	eor	r25, r25
    26aa:	87 fd       	sbrc	r24, 7
    26ac:	90 95       	com	r25
    26ae:	c0 97       	sbiw	r24, 0x30	; 48
    26b0:	8a 30       	cpi	r24, 0x0A	; 10
    26b2:	91 05       	cpc	r25, r1
    26b4:	08 f4       	brcc	.+2      	; 0x26b8 <evaluatePostfix+0x1f0>
    26b6:	61 cf       	rjmp	.-318    	; 0x257a <evaluatePostfix+0xb2>
    26b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    26ba:	3f 85       	ldd	r19, Y+15	; 0x0f
    26bc:	8c 89       	ldd	r24, Y+20	; 0x14
    26be:	9d 89       	ldd	r25, Y+21	; 0x15
    26c0:	fc 01       	movw	r30, r24
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	80 81       	ld	r24, Z
    26c8:	8e 32       	cpi	r24, 0x2E	; 46
    26ca:	09 f4       	brne	.+2      	; 0x26ce <evaluatePostfix+0x206>
    26cc:	56 cf       	rjmp	.-340    	; 0x257a <evaluatePostfix+0xb2>
				if(flag==0){
				num = num * 10 + (f32)(exp[i] - '0');
				}
				i++;
			}
			i--;
    26ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    26d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26d2:	a8 89       	ldd	r26, Y+16	; 0x10
    26d4:	b9 89       	ldd	r27, Y+17	; 0x11
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	a1 09       	sbc	r26, r1
    26da:	b1 09       	sbc	r27, r1
    26dc:	8e 87       	std	Y+14, r24	; 0x0e
    26de:	9f 87       	std	Y+15, r25	; 0x0f
    26e0:	a8 8b       	std	Y+16, r26	; 0x10
    26e2:	b9 8b       	std	Y+17, r27	; 0x11

			// push the element in the stack
			push(stack, num);
    26e4:	8a 89       	ldd	r24, Y+18	; 0x12
    26e6:	9b 89       	ldd	r25, Y+19	; 0x13
    26e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    26ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    26ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    26ee:	5d 85       	ldd	r21, Y+13	; 0x0d
    26f0:	ba 01       	movw	r22, r20
    26f2:	a9 01       	movw	r20, r18
    26f4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <push>
    26f8:	91 c0       	rjmp	.+290    	; 0x281c <evaluatePostfix+0x354>
		}

		// If the scanned character is an operator, pop two
		// elements from stack apply the operator
		else {
			f32 val1 = pop(stack);
    26fa:	8a 89       	ldd	r24, Y+18	; 0x12
    26fc:	9b 89       	ldd	r25, Y+19	; 0x13
    26fe:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <pop>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	af 83       	std	Y+7, r26	; 0x07
    270c:	b8 87       	std	Y+8, r27	; 0x08
			f32 val2 = pop(stack);
    270e:	8a 89       	ldd	r24, Y+18	; 0x12
    2710:	9b 89       	ldd	r25, Y+19	; 0x13
    2712:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <pop>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	ab 83       	std	Y+3, r26	; 0x03
    2720:	bc 83       	std	Y+4, r27	; 0x04

			switch (exp[i]) {
    2722:	2e 85       	ldd	r18, Y+14	; 0x0e
    2724:	3f 85       	ldd	r19, Y+15	; 0x0f
    2726:	8c 89       	ldd	r24, Y+20	; 0x14
    2728:	9d 89       	ldd	r25, Y+21	; 0x15
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 81       	ld	r24, Z
    2732:	a8 2f       	mov	r26, r24
    2734:	bb 27       	eor	r27, r27
    2736:	a7 fd       	sbrc	r26, 7
    2738:	b0 95       	com	r27
    273a:	bf 8b       	std	Y+23, r27	; 0x17
    273c:	ae 8b       	std	Y+22, r26	; 0x16
    273e:	2e 89       	ldd	r18, Y+22	; 0x16
    2740:	3f 89       	ldd	r19, Y+23	; 0x17
    2742:	2b 32       	cpi	r18, 0x2B	; 43
    2744:	31 05       	cpc	r19, r1
    2746:	b9 f0       	breq	.+46     	; 0x2776 <evaluatePostfix+0x2ae>
    2748:	8e 89       	ldd	r24, Y+22	; 0x16
    274a:	9f 89       	ldd	r25, Y+23	; 0x17
    274c:	8c 32       	cpi	r24, 0x2C	; 44
    274e:	91 05       	cpc	r25, r1
    2750:	34 f4       	brge	.+12     	; 0x275e <evaluatePostfix+0x296>
    2752:	ae 89       	ldd	r26, Y+22	; 0x16
    2754:	bf 89       	ldd	r27, Y+23	; 0x17
    2756:	aa 32       	cpi	r26, 0x2A	; 42
    2758:	b1 05       	cpc	r27, r1
    275a:	b9 f1       	breq	.+110    	; 0x27ca <evaluatePostfix+0x302>
    275c:	5f c0       	rjmp	.+190    	; 0x281c <evaluatePostfix+0x354>
    275e:	2e 89       	ldd	r18, Y+22	; 0x16
    2760:	3f 89       	ldd	r19, Y+23	; 0x17
    2762:	2d 32       	cpi	r18, 0x2D	; 45
    2764:	31 05       	cpc	r19, r1
    2766:	e1 f0       	breq	.+56     	; 0x27a0 <evaluatePostfix+0x2d8>
    2768:	8e 89       	ldd	r24, Y+22	; 0x16
    276a:	9f 89       	ldd	r25, Y+23	; 0x17
    276c:	8f 32       	cpi	r24, 0x2F	; 47
    276e:	91 05       	cpc	r25, r1
    2770:	09 f4       	brne	.+2      	; 0x2774 <evaluatePostfix+0x2ac>
    2772:	40 c0       	rjmp	.+128    	; 0x27f4 <evaluatePostfix+0x32c>
    2774:	53 c0       	rjmp	.+166    	; 0x281c <evaluatePostfix+0x354>
			case '+':
				push(stack, val2 + val1);
    2776:	69 81       	ldd	r22, Y+1	; 0x01
    2778:	7a 81       	ldd	r23, Y+2	; 0x02
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	2d 81       	ldd	r18, Y+5	; 0x05
    2780:	3e 81       	ldd	r19, Y+6	; 0x06
    2782:	4f 81       	ldd	r20, Y+7	; 0x07
    2784:	58 85       	ldd	r21, Y+8	; 0x08
    2786:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9c 01       	movw	r18, r24
    2790:	ad 01       	movw	r20, r26
    2792:	8a 89       	ldd	r24, Y+18	; 0x12
    2794:	9b 89       	ldd	r25, Y+19	; 0x13
    2796:	ba 01       	movw	r22, r20
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <push>
    279e:	3e c0       	rjmp	.+124    	; 0x281c <evaluatePostfix+0x354>
				break;
			case '-':
				push(stack, val2 - val1);
    27a0:	69 81       	ldd	r22, Y+1	; 0x01
    27a2:	7a 81       	ldd	r23, Y+2	; 0x02
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	2d 81       	ldd	r18, Y+5	; 0x05
    27aa:	3e 81       	ldd	r19, Y+6	; 0x06
    27ac:	4f 81       	ldd	r20, Y+7	; 0x07
    27ae:	58 85       	ldd	r21, Y+8	; 0x08
    27b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9c 01       	movw	r18, r24
    27ba:	ad 01       	movw	r20, r26
    27bc:	8a 89       	ldd	r24, Y+18	; 0x12
    27be:	9b 89       	ldd	r25, Y+19	; 0x13
    27c0:	ba 01       	movw	r22, r20
    27c2:	a9 01       	movw	r20, r18
    27c4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <push>
    27c8:	29 c0       	rjmp	.+82     	; 0x281c <evaluatePostfix+0x354>
				break;
			case '*':
				push(stack, val2 * val1);
    27ca:	69 81       	ldd	r22, Y+1	; 0x01
    27cc:	7a 81       	ldd	r23, Y+2	; 0x02
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	9c 81       	ldd	r25, Y+4	; 0x04
    27d2:	2d 81       	ldd	r18, Y+5	; 0x05
    27d4:	3e 81       	ldd	r19, Y+6	; 0x06
    27d6:	4f 81       	ldd	r20, Y+7	; 0x07
    27d8:	58 85       	ldd	r21, Y+8	; 0x08
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9c 01       	movw	r18, r24
    27e4:	ad 01       	movw	r20, r26
    27e6:	8a 89       	ldd	r24, Y+18	; 0x12
    27e8:	9b 89       	ldd	r25, Y+19	; 0x13
    27ea:	ba 01       	movw	r22, r20
    27ec:	a9 01       	movw	r20, r18
    27ee:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <push>
    27f2:	14 c0       	rjmp	.+40     	; 0x281c <evaluatePostfix+0x354>
				break;
			case '/':
				push(stack, val2 / val1);
    27f4:	69 81       	ldd	r22, Y+1	; 0x01
    27f6:	7a 81       	ldd	r23, Y+2	; 0x02
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	2d 81       	ldd	r18, Y+5	; 0x05
    27fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2800:	4f 81       	ldd	r20, Y+7	; 0x07
    2802:	58 85       	ldd	r21, Y+8	; 0x08
    2804:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9c 01       	movw	r18, r24
    280e:	ad 01       	movw	r20, r26
    2810:	8a 89       	ldd	r24, Y+18	; 0x12
    2812:	9b 89       	ldd	r25, Y+19	; 0x13
    2814:	ba 01       	movw	r22, r20
    2816:	a9 01       	movw	r20, r18
    2818:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <push>
	// See if stack was created successfully
	if (!stack)
		return -1;

	// Scan all character one by one
	for (i = 0; exp[i]; ++i) {
    281c:	8e 85       	ldd	r24, Y+14	; 0x0e
    281e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2820:	a8 89       	ldd	r26, Y+16	; 0x10
    2822:	b9 89       	ldd	r27, Y+17	; 0x11
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	a1 1d       	adc	r26, r1
    2828:	b1 1d       	adc	r27, r1
    282a:	8e 87       	std	Y+14, r24	; 0x0e
    282c:	9f 87       	std	Y+15, r25	; 0x0f
    282e:	a8 8b       	std	Y+16, r26	; 0x10
    2830:	b9 8b       	std	Y+17, r27	; 0x11
    2832:	2e 85       	ldd	r18, Y+14	; 0x0e
    2834:	3f 85       	ldd	r19, Y+15	; 0x0f
    2836:	8c 89       	ldd	r24, Y+20	; 0x14
    2838:	9d 89       	ldd	r25, Y+21	; 0x15
    283a:	fc 01       	movw	r30, r24
    283c:	e2 0f       	add	r30, r18
    283e:	f3 1f       	adc	r31, r19
    2840:	80 81       	ld	r24, Z
    2842:	88 23       	and	r24, r24
    2844:	09 f0       	breq	.+2      	; 0x2848 <evaluatePostfix+0x380>
    2846:	6a ce       	rjmp	.-812    	; 0x251c <evaluatePostfix+0x54>
				push(stack, val2 / val1);
				break;
			}
		}
	}
	return pop(stack);
    2848:	8a 89       	ldd	r24, Y+18	; 0x12
    284a:	9b 89       	ldd	r25, Y+19	; 0x13
    284c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <pop>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	88 8f       	std	Y+24, r24	; 0x18
    2856:	99 8f       	std	Y+25, r25	; 0x19
    2858:	aa 8f       	std	Y+26, r26	; 0x1a
    285a:	bb 8f       	std	Y+27, r27	; 0x1b
    285c:	88 8d       	ldd	r24, Y+24	; 0x18
    285e:	99 8d       	ldd	r25, Y+25	; 0x19
    2860:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2862:	bb 8d       	ldd	r27, Y+27	; 0x1b
}
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	6b 96       	adiw	r28, 0x1b	; 27
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	08 95       	ret

00002882 <precedence>:
 * return the return precedence of operators
 */


s32 precedence(s8 operator)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	27 97       	sbiw	r28, 0x07	; 7
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	89 83       	std	Y+1, r24	; 0x01
	switch (operator)
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	33 27       	eor	r19, r19
    289e:	27 fd       	sbrc	r18, 7
    28a0:	30 95       	com	r19
    28a2:	3f 83       	std	Y+7, r19	; 0x07
    28a4:	2e 83       	std	Y+6, r18	; 0x06
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	9f 81       	ldd	r25, Y+7	; 0x07
    28aa:	8d 32       	cpi	r24, 0x2D	; 45
    28ac:	91 05       	cpc	r25, r1
    28ae:	d9 f0       	breq	.+54     	; 0x28e6 <precedence+0x64>
    28b0:	ae 81       	ldd	r26, Y+6	; 0x06
    28b2:	bf 81       	ldd	r27, Y+7	; 0x07
    28b4:	ae 32       	cpi	r26, 0x2E	; 46
    28b6:	b1 05       	cpc	r27, r1
    28b8:	5c f4       	brge	.+22     	; 0x28d0 <precedence+0x4e>
    28ba:	2e 81       	ldd	r18, Y+6	; 0x06
    28bc:	3f 81       	ldd	r19, Y+7	; 0x07
    28be:	2a 32       	cpi	r18, 0x2A	; 42
    28c0:	31 05       	cpc	r19, r1
    28c2:	d1 f0       	breq	.+52     	; 0x28f8 <precedence+0x76>
    28c4:	8e 81       	ldd	r24, Y+6	; 0x06
    28c6:	9f 81       	ldd	r25, Y+7	; 0x07
    28c8:	8b 32       	cpi	r24, 0x2B	; 43
    28ca:	91 05       	cpc	r25, r1
    28cc:	61 f0       	breq	.+24     	; 0x28e6 <precedence+0x64>
    28ce:	26 c0       	rjmp	.+76     	; 0x291c <precedence+0x9a>
    28d0:	ae 81       	ldd	r26, Y+6	; 0x06
    28d2:	bf 81       	ldd	r27, Y+7	; 0x07
    28d4:	af 32       	cpi	r26, 0x2F	; 47
    28d6:	b1 05       	cpc	r27, r1
    28d8:	79 f0       	breq	.+30     	; 0x28f8 <precedence+0x76>
    28da:	2e 81       	ldd	r18, Y+6	; 0x06
    28dc:	3f 81       	ldd	r19, Y+7	; 0x07
    28de:	2e 35       	cpi	r18, 0x5E	; 94
    28e0:	31 05       	cpc	r19, r1
    28e2:	99 f0       	breq	.+38     	; 0x290a <precedence+0x88>
    28e4:	1b c0       	rjmp	.+54     	; 0x291c <precedence+0x9a>
	{
	case '+':
	case '-':
		return 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	9b 83       	std	Y+3, r25	; 0x03
    28f2:	ac 83       	std	Y+4, r26	; 0x04
    28f4:	bd 83       	std	Y+5, r27	; 0x05
    28f6:	1a c0       	rjmp	.+52     	; 0x292c <precedence+0xaa>
	case '*':
	case '/':
		return 2;
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	8a 83       	std	Y+2, r24	; 0x02
    2902:	9b 83       	std	Y+3, r25	; 0x03
    2904:	ac 83       	std	Y+4, r26	; 0x04
    2906:	bd 83       	std	Y+5, r27	; 0x05
    2908:	11 c0       	rjmp	.+34     	; 0x292c <precedence+0xaa>
	case '^':
		return 3;
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	8a 83       	std	Y+2, r24	; 0x02
    2914:	9b 83       	std	Y+3, r25	; 0x03
    2916:	ac 83       	std	Y+4, r26	; 0x04
    2918:	bd 83       	std	Y+5, r27	; 0x05
    291a:	08 c0       	rjmp	.+16     	; 0x292c <precedence+0xaa>
	default:
		return -1;
    291c:	8f ef       	ldi	r24, 0xFF	; 255
    291e:	9f ef       	ldi	r25, 0xFF	; 255
    2920:	af ef       	ldi	r26, 0xFF	; 255
    2922:	bf ef       	ldi	r27, 0xFF	; 255
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	9b 83       	std	Y+3, r25	; 0x03
    2928:	ac 83       	std	Y+4, r26	; 0x04
    292a:	bd 83       	std	Y+5, r27	; 0x05
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	ac 81       	ldd	r26, Y+4	; 0x04
    2932:	bd 81       	ldd	r27, Y+5	; 0x05
	}
}
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	27 96       	adiw	r28, 0x07	; 7
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <isOperator>:
          1 : if operator
          0 : if not operator
 */

s32 isOperator(s8 ch)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <isOperator+0x6>
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	89 83       	std	Y+1, r24	; 0x01
	return (ch == '+' || ch == '-' || ch == '*' || ch == '/'
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8b 32       	cpi	r24, 0x2B	; 43
    295c:	61 f0       	breq	.+24     	; 0x2976 <isOperator+0x2c>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	8d 32       	cpi	r24, 0x2D	; 45
    2962:	49 f0       	breq	.+18     	; 0x2976 <isOperator+0x2c>
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	8a 32       	cpi	r24, 0x2A	; 42
    2968:	31 f0       	breq	.+12     	; 0x2976 <isOperator+0x2c>
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	8f 32       	cpi	r24, 0x2F	; 47
    296e:	19 f0       	breq	.+6      	; 0x2976 <isOperator+0x2c>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	8e 35       	cpi	r24, 0x5E	; 94
    2974:	29 f4       	brne	.+10     	; 0x2980 <isOperator+0x36>
    2976:	21 e0       	ldi	r18, 0x01	; 1
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3b 83       	std	Y+3, r19	; 0x03
    297c:	2a 83       	std	Y+2, r18	; 0x02
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <isOperator+0x3a>
    2980:	1b 82       	std	Y+3, r1	; 0x03
    2982:	1a 82       	std	Y+2, r1	; 0x02
    2984:	2a 81       	ldd	r18, Y+2	; 0x02
    2986:	3b 81       	ldd	r19, Y+3	; 0x03
    2988:	c9 01       	movw	r24, r18
    298a:	aa 27       	eor	r26, r26
    298c:	97 fd       	sbrc	r25, 7
    298e:	a0 95       	com	r26
    2990:	ba 2f       	mov	r27, r26
			|| ch == '^');
}
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <main>:
#include "Projects_Interface.h"
#include "math.h";

int main()
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	2b 97       	sbiw	r28, 0x0b	; 11
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
	u8 ret=0;                                      // KEYPAD CHARACTER RECEIVER VARIABLE TO RECEIVE KEYPAD CHARACTER
    29b6:	1b 86       	std	Y+11, r1	; 0x0b
	u8 infix_index=0;                              // to increment the index of the infix array to put the input expression
    29b8:	1a 86       	std	Y+10, r1	; 0x0a
	u8 lcd_postfix_pos=0;                          // to increment lcd colum position while Printing the expression value
    29ba:	19 86       	std	Y+9, r1	; 0x09
    u8 lcd_infix_pos=0;                            // to increment lcd colum position while adding the expression
    29bc:	18 86       	std	Y+8, r1	; 0x08
    u8 f=0;
    29be:	1f 82       	std	Y+7, r1	; 0x07

    f32 result ;
	H_KeyPad_Void_KeyPadInit(); // KEYPAD INTIALIZING
    29c0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <H_KeyPad_Void_KeyPadInit>
	H_Lcd_Void_LCDInit();       // LCD INTIALIZING
    29c4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <H_Lcd_Void_LCDInit>




	H_Lcd_Void_LCDClear();                         // CLEAR LCD INITIALY
    29c8:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0, 1);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString(" ");            // INFIX EXPRESSION ON LCD
    29d4:	85 e7       	ldi	r24, 0x75	; 117
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1, 1);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>

	H_Lcd_Void_LCDWriteString("Result:");       // THE EXPRESSION VALUE ON LCD
    29e4:	87 e7       	ldi	r24, 0x77	; 119
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Lcd_Void_LCDWriteString>


	while(1){

		ret=H_KeyPad_U8_KeyPadRead();
    29ec:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <H_KeyPad_U8_KeyPadRead>
    29f0:	8b 87       	std	Y+11, r24	; 0x0b

		if(ret=='1'||ret=='2'||ret=='3'||ret=='4'||ret=='5'||   // IF FUNCTION TO CHECK USER INPUTS
    29f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    29f4:	81 33       	cpi	r24, 0x31	; 49
    29f6:	51 f1       	breq	.+84     	; 0x2a4c <main+0xaa>
    29f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29fa:	82 33       	cpi	r24, 0x32	; 50
    29fc:	39 f1       	breq	.+78     	; 0x2a4c <main+0xaa>
    29fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a00:	83 33       	cpi	r24, 0x33	; 51
    2a02:	21 f1       	breq	.+72     	; 0x2a4c <main+0xaa>
    2a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a06:	84 33       	cpi	r24, 0x34	; 52
    2a08:	09 f1       	breq	.+66     	; 0x2a4c <main+0xaa>
    2a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a0c:	85 33       	cpi	r24, 0x35	; 53
    2a0e:	f1 f0       	breq	.+60     	; 0x2a4c <main+0xaa>
    2a10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a12:	86 33       	cpi	r24, 0x36	; 54
    2a14:	d9 f0       	breq	.+54     	; 0x2a4c <main+0xaa>
    2a16:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a18:	87 33       	cpi	r24, 0x37	; 55
    2a1a:	c1 f0       	breq	.+48     	; 0x2a4c <main+0xaa>
    2a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1e:	88 33       	cpi	r24, 0x38	; 56
    2a20:	a9 f0       	breq	.+42     	; 0x2a4c <main+0xaa>
    2a22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a24:	89 33       	cpi	r24, 0x39	; 57
    2a26:	91 f0       	breq	.+36     	; 0x2a4c <main+0xaa>
    2a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a2a:	8a 32       	cpi	r24, 0x2A	; 42
    2a2c:	79 f0       	breq	.+30     	; 0x2a4c <main+0xaa>
    2a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a30:	8f 32       	cpi	r24, 0x2F	; 47
    2a32:	61 f0       	breq	.+24     	; 0x2a4c <main+0xaa>
    2a34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a36:	8b 32       	cpi	r24, 0x2B	; 43
    2a38:	49 f0       	breq	.+18     	; 0x2a4c <main+0xaa>
    2a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a3c:	8d 32       	cpi	r24, 0x2D	; 45
    2a3e:	31 f0       	breq	.+12     	; 0x2a4c <main+0xaa>
    2a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a42:	8e 32       	cpi	r24, 0x2E	; 46
    2a44:	19 f0       	breq	.+6      	; 0x2a4c <main+0xaa>
    2a46:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a48:	80 33       	cpi	r24, 0x30	; 48
    2a4a:	e1 f5       	brne	.+120    	; 0x2ac4 <main+0x122>
				     ret=='6'||ret=='7'||ret=='8'||ret=='9'||
				     ret=='*'||ret=='/'||ret=='+'||ret=='-'||
					 ret=='.'||ret=='0')
		{
			H_Lcd_Void_LCDGoTo(0, lcd_infix_pos);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	68 85       	ldd	r22, Y+8	; 0x08
    2a50:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>
			lcd_infix_pos++;
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	88 87       	std	Y+8, r24	; 0x08
			if(ret=='*'||ret=='/'||ret=='+'||ret=='-')  // IF FUNCTION TO CHECK IF OPERATOR IS ENTERD
    2a5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5c:	8a 32       	cpi	r24, 0x2A	; 42
    2a5e:	49 f0       	breq	.+18     	; 0x2a72 <main+0xd0>
    2a60:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a62:	8f 32       	cpi	r24, 0x2F	; 47
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <main+0xd0>
    2a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a68:	8b 32       	cpi	r24, 0x2B	; 43
    2a6a:	19 f0       	breq	.+6      	; 0x2a72 <main+0xd0>
    2a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a6e:	8d 32       	cpi	r24, 0x2D	; 45
    2a70:	d1 f4       	brne	.+52     	; 0x2aa6 <main+0x104>
			{
				H_Lcd_Void_LCDWriteCharacter(ret);
    2a72:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a74:	0e 94 a3 0a 	call	0x1546	; 0x1546 <H_Lcd_Void_LCDWriteCharacter>
				infix[infix_index++]=ret;
    2a78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a80:	fc 01       	movw	r30, r24
    2a82:	e8 55       	subi	r30, 0x58	; 88
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	20 83       	st	Z, r18
    2a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	8a 87       	std	Y+10, r24	; 0x0a
				infix[infix_index++]=' ';
    2a8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	fc 01       	movw	r30, r24
    2a96:	e8 55       	subi	r30, 0x58	; 88
    2a98:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9a:	80 e2       	ldi	r24, 0x20	; 32
    2a9c:	80 83       	st	Z, r24
    2a9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	8a 87       	std	Y+10, r24	; 0x0a
    2aa4:	a3 cf       	rjmp	.-186    	; 0x29ec <main+0x4a>
			}
			else
			{
				infix[infix_index++]=ret;
    2aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aae:	fc 01       	movw	r30, r24
    2ab0:	e8 55       	subi	r30, 0x58	; 88
    2ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab4:	20 83       	st	Z, r18
    2ab6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ab8:	8f 5f       	subi	r24, 0xFF	; 255
    2aba:	8a 87       	std	Y+10, r24	; 0x0a
				H_Lcd_Void_LCDWriteCharacter(ret);
    2abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2abe:	0e 94 a3 0a 	call	0x1546	; 0x1546 <H_Lcd_Void_LCDWriteCharacter>
    2ac2:	94 cf       	rjmp	.-216    	; 0x29ec <main+0x4a>
			}
		}

		else if(ret=='=')                // INCASE THE USER END THE EXPRESSION AND WANT THE RESULT
    2ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ac6:	8d 33       	cpi	r24, 0x3D	; 61
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <main+0x12a>
    2aca:	90 cf       	rjmp	.-224    	; 0x29ec <main+0x4a>
		{

			lcd_postfix_pos++;
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	8f 5f       	subi	r24, 0xFF	; 255
    2ad0:	89 87       	std	Y+9, r24	; 0x09
			s8* postfix = infixToPostfix(infix);
    2ad2:	88 ea       	ldi	r24, 0xA8	; 168
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	0e 94 0b 10 	call	0x2016	; 0x2016 <infixToPostfix>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01

			if(f==0){
    2ade:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae0:	88 23       	and	r24, r24
    2ae2:	d1 f4       	brne	.+52     	; 0x2b18 <main+0x176>


			H_Lcd_Void_LCDGoTo(1, 8);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	68 e0       	ldi	r22, 0x08	; 8
    2ae8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>
			result=evaluatePostfix(postfix);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <evaluatePostfix>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	ad 83       	std	Y+5, r26	; 0x05
    2afe:	be 83       	std	Y+6, r27	; 0x06


			LCD_Write_float(result);
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	ad 81       	ldd	r26, Y+5	; 0x05
    2b06:	be 81       	ldd	r27, Y+6	; 0x06
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_Write_float>
				 lcd_postfix_pos=0;                          // to increment lcd colum position while Printing the expression value
			    lcd_infix_pos=0;                            // to increment lcd colum position while adding the expression
			    f=0;
			    continue;
			}
			f++;
    2b10:	8f 81       	ldd	r24, Y+7	; 0x07
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	8f 83       	std	Y+7, r24	; 0x07
    2b16:	6a cf       	rjmp	.-300    	; 0x29ec <main+0x4a>

			LCD_Write_float(result);


			}
			else{H_Lcd_Void_LCDClear();                         // CLEAR LCD INITIALY
    2b18:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Lcd_Void_LCDClear>
			H_Lcd_Void_LCDGoTo(0, 1);
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(" ");            // INFIX EXPRESSION ON LCD
    2b24:	85 e7       	ldi	r24, 0x75	; 117
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDGoTo(1, 1);
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <H_Lcd_Void_LCDGoTo>

			H_Lcd_Void_LCDWriteString("Result:");            // THE EXPRESSION VALUE ON LCD
    2b34:	87 e7       	ldi	r24, 0x77	; 119
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Lcd_Void_LCDWriteString>
			ret=0;  // KEYPAD CHARACTER RECEIVER VARIABLE TO RECEIVE KEYPAD CHARACTER
    2b3c:	1b 86       	std	Y+11, r1	; 0x0b

			result=0;
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	8b 83       	std	Y+3, r24	; 0x03
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	ad 83       	std	Y+5, r26	; 0x05
    2b4c:	be 83       	std	Y+6, r27	; 0x06
			infix_index=0;                              // to increment the index of the infix array to put the input expression
    2b4e:	1a 86       	std	Y+10, r1	; 0x0a
				 lcd_postfix_pos=0;                          // to increment lcd colum position while Printing the expression value
    2b50:	19 86       	std	Y+9, r1	; 0x09
			    lcd_infix_pos=0;                            // to increment lcd colum position while adding the expression
    2b52:	18 86       	std	Y+8, r1	; 0x08
			    f=0;
    2b54:	1f 82       	std	Y+7, r1	; 0x07
    2b56:	4a cf       	rjmp	.-364    	; 0x29ec <main+0x4a>

00002b58 <__udivmodqi4>:
    2b58:	99 1b       	sub	r25, r25
    2b5a:	79 e0       	ldi	r23, 0x09	; 9
    2b5c:	04 c0       	rjmp	.+8      	; 0x2b66 <__udivmodqi4_ep>

00002b5e <__udivmodqi4_loop>:
    2b5e:	99 1f       	adc	r25, r25
    2b60:	96 17       	cp	r25, r22
    2b62:	08 f0       	brcs	.+2      	; 0x2b66 <__udivmodqi4_ep>
    2b64:	96 1b       	sub	r25, r22

00002b66 <__udivmodqi4_ep>:
    2b66:	88 1f       	adc	r24, r24
    2b68:	7a 95       	dec	r23
    2b6a:	c9 f7       	brne	.-14     	; 0x2b5e <__udivmodqi4_loop>
    2b6c:	80 95       	com	r24
    2b6e:	08 95       	ret

00002b70 <__divmodsi4>:
    2b70:	97 fb       	bst	r25, 7
    2b72:	09 2e       	mov	r0, r25
    2b74:	05 26       	eor	r0, r21
    2b76:	0e d0       	rcall	.+28     	; 0x2b94 <__divmodsi4_neg1>
    2b78:	57 fd       	sbrc	r21, 7
    2b7a:	04 d0       	rcall	.+8      	; 0x2b84 <__divmodsi4_neg2>
    2b7c:	14 d0       	rcall	.+40     	; 0x2ba6 <__udivmodsi4>
    2b7e:	0a d0       	rcall	.+20     	; 0x2b94 <__divmodsi4_neg1>
    2b80:	00 1c       	adc	r0, r0
    2b82:	38 f4       	brcc	.+14     	; 0x2b92 <__divmodsi4_exit>

00002b84 <__divmodsi4_neg2>:
    2b84:	50 95       	com	r21
    2b86:	40 95       	com	r20
    2b88:	30 95       	com	r19
    2b8a:	21 95       	neg	r18
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b90:	5f 4f       	sbci	r21, 0xFF	; 255

00002b92 <__divmodsi4_exit>:
    2b92:	08 95       	ret

00002b94 <__divmodsi4_neg1>:
    2b94:	f6 f7       	brtc	.-4      	; 0x2b92 <__divmodsi4_exit>
    2b96:	90 95       	com	r25
    2b98:	80 95       	com	r24
    2b9a:	70 95       	com	r23
    2b9c:	61 95       	neg	r22
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba4:	08 95       	ret

00002ba6 <__udivmodsi4>:
    2ba6:	a1 e2       	ldi	r26, 0x21	; 33
    2ba8:	1a 2e       	mov	r1, r26
    2baa:	aa 1b       	sub	r26, r26
    2bac:	bb 1b       	sub	r27, r27
    2bae:	fd 01       	movw	r30, r26
    2bb0:	0d c0       	rjmp	.+26     	; 0x2bcc <__udivmodsi4_ep>

00002bb2 <__udivmodsi4_loop>:
    2bb2:	aa 1f       	adc	r26, r26
    2bb4:	bb 1f       	adc	r27, r27
    2bb6:	ee 1f       	adc	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	a2 17       	cp	r26, r18
    2bbc:	b3 07       	cpc	r27, r19
    2bbe:	e4 07       	cpc	r30, r20
    2bc0:	f5 07       	cpc	r31, r21
    2bc2:	20 f0       	brcs	.+8      	; 0x2bcc <__udivmodsi4_ep>
    2bc4:	a2 1b       	sub	r26, r18
    2bc6:	b3 0b       	sbc	r27, r19
    2bc8:	e4 0b       	sbc	r30, r20
    2bca:	f5 0b       	sbc	r31, r21

00002bcc <__udivmodsi4_ep>:
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	1a 94       	dec	r1
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <__udivmodsi4_loop>
    2bd8:	60 95       	com	r22
    2bda:	70 95       	com	r23
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	bd 01       	movw	r22, r26
    2be6:	cf 01       	movw	r24, r30
    2be8:	08 95       	ret

00002bea <__prologue_saves__>:
    2bea:	2f 92       	push	r2
    2bec:	3f 92       	push	r3
    2bee:	4f 92       	push	r4
    2bf0:	5f 92       	push	r5
    2bf2:	6f 92       	push	r6
    2bf4:	7f 92       	push	r7
    2bf6:	8f 92       	push	r8
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	bf 92       	push	r11
    2bfe:	cf 92       	push	r12
    2c00:	df 92       	push	r13
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	ca 1b       	sub	r28, r26
    2c14:	db 0b       	sbc	r29, r27
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	09 94       	ijmp

00002c22 <__epilogue_restores__>:
    2c22:	2a 88       	ldd	r2, Y+18	; 0x12
    2c24:	39 88       	ldd	r3, Y+17	; 0x11
    2c26:	48 88       	ldd	r4, Y+16	; 0x10
    2c28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c34:	b9 84       	ldd	r11, Y+9	; 0x09
    2c36:	c8 84       	ldd	r12, Y+8	; 0x08
    2c38:	df 80       	ldd	r13, Y+7	; 0x07
    2c3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c40:	1b 81       	ldd	r17, Y+3	; 0x03
    2c42:	aa 81       	ldd	r26, Y+2	; 0x02
    2c44:	b9 81       	ldd	r27, Y+1	; 0x01
    2c46:	ce 0f       	add	r28, r30
    2c48:	d1 1d       	adc	r29, r1
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	ed 01       	movw	r28, r26
    2c56:	08 95       	ret

00002c58 <malloc>:
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	91 05       	cpc	r25, r1
    2c62:	10 f4       	brcc	.+4      	; 0x2c68 <malloc+0x10>
    2c64:	62 e0       	ldi	r22, 0x02	; 2
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	a0 91 0e 02 	lds	r26, 0x020E
    2c6c:	b0 91 0f 02 	lds	r27, 0x020F
    2c70:	ed 01       	movw	r28, r26
    2c72:	e0 e0       	ldi	r30, 0x00	; 0
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	21 c0       	rjmp	.+66     	; 0x2cbe <malloc+0x66>
    2c7c:	88 81       	ld	r24, Y
    2c7e:	99 81       	ldd	r25, Y+1	; 0x01
    2c80:	86 17       	cp	r24, r22
    2c82:	97 07       	cpc	r25, r23
    2c84:	69 f4       	brne	.+26     	; 0x2ca0 <malloc+0x48>
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	30 97       	sbiw	r30, 0x00	; 0
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <malloc+0x3c>
    2c8e:	93 83       	std	Z+3, r25	; 0x03
    2c90:	82 83       	std	Z+2, r24	; 0x02
    2c92:	04 c0       	rjmp	.+8      	; 0x2c9c <malloc+0x44>
    2c94:	90 93 0f 02 	sts	0x020F, r25
    2c98:	80 93 0e 02 	sts	0x020E, r24
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	34 c0       	rjmp	.+104    	; 0x2d08 <malloc+0xb0>
    2ca0:	68 17       	cp	r22, r24
    2ca2:	79 07       	cpc	r23, r25
    2ca4:	38 f4       	brcc	.+14     	; 0x2cb4 <malloc+0x5c>
    2ca6:	41 15       	cp	r20, r1
    2ca8:	51 05       	cpc	r21, r1
    2caa:	19 f0       	breq	.+6      	; 0x2cb2 <malloc+0x5a>
    2cac:	84 17       	cp	r24, r20
    2cae:	95 07       	cpc	r25, r21
    2cb0:	08 f4       	brcc	.+2      	; 0x2cb4 <malloc+0x5c>
    2cb2:	ac 01       	movw	r20, r24
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cba:	9c 01       	movw	r18, r24
    2cbc:	e9 01       	movw	r28, r18
    2cbe:	20 97       	sbiw	r28, 0x00	; 0
    2cc0:	e9 f6       	brne	.-70     	; 0x2c7c <malloc+0x24>
    2cc2:	41 15       	cp	r20, r1
    2cc4:	51 05       	cpc	r21, r1
    2cc6:	a9 f1       	breq	.+106    	; 0x2d32 <malloc+0xda>
    2cc8:	ca 01       	movw	r24, r20
    2cca:	86 1b       	sub	r24, r22
    2ccc:	97 0b       	sbc	r25, r23
    2cce:	04 97       	sbiw	r24, 0x04	; 4
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <malloc+0x7c>
    2cd2:	ba 01       	movw	r22, r20
    2cd4:	e0 e0       	ldi	r30, 0x00	; 0
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	2a c0       	rjmp	.+84     	; 0x2d2e <malloc+0xd6>
    2cda:	8d 91       	ld	r24, X+
    2cdc:	9c 91       	ld	r25, X
    2cde:	11 97       	sbiw	r26, 0x01	; 1
    2ce0:	84 17       	cp	r24, r20
    2ce2:	95 07       	cpc	r25, r21
    2ce4:	f9 f4       	brne	.+62     	; 0x2d24 <malloc+0xcc>
    2ce6:	64 17       	cp	r22, r20
    2ce8:	75 07       	cpc	r23, r21
    2cea:	81 f4       	brne	.+32     	; 0x2d0c <malloc+0xb4>
    2cec:	12 96       	adiw	r26, 0x02	; 2
    2cee:	8d 91       	ld	r24, X+
    2cf0:	9c 91       	ld	r25, X
    2cf2:	13 97       	sbiw	r26, 0x03	; 3
    2cf4:	30 97       	sbiw	r30, 0x00	; 0
    2cf6:	19 f0       	breq	.+6      	; 0x2cfe <malloc+0xa6>
    2cf8:	93 83       	std	Z+3, r25	; 0x03
    2cfa:	82 83       	std	Z+2, r24	; 0x02
    2cfc:	04 c0       	rjmp	.+8      	; 0x2d06 <malloc+0xae>
    2cfe:	90 93 0f 02 	sts	0x020F, r25
    2d02:	80 93 0e 02 	sts	0x020E, r24
    2d06:	fd 01       	movw	r30, r26
    2d08:	32 96       	adiw	r30, 0x02	; 2
    2d0a:	4f c0       	rjmp	.+158    	; 0x2daa <malloc+0x152>
    2d0c:	ca 01       	movw	r24, r20
    2d0e:	86 1b       	sub	r24, r22
    2d10:	97 0b       	sbc	r25, r23
    2d12:	fd 01       	movw	r30, r26
    2d14:	e8 0f       	add	r30, r24
    2d16:	f9 1f       	adc	r31, r25
    2d18:	61 93       	st	Z+, r22
    2d1a:	71 93       	st	Z+, r23
    2d1c:	02 97       	sbiw	r24, 0x02	; 2
    2d1e:	8d 93       	st	X+, r24
    2d20:	9c 93       	st	X, r25
    2d22:	43 c0       	rjmp	.+134    	; 0x2daa <malloc+0x152>
    2d24:	fd 01       	movw	r30, r26
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	d9 01       	movw	r26, r18
    2d2e:	10 97       	sbiw	r26, 0x00	; 0
    2d30:	a1 f6       	brne	.-88     	; 0x2cda <malloc+0x82>
    2d32:	80 91 0c 02 	lds	r24, 0x020C
    2d36:	90 91 0d 02 	lds	r25, 0x020D
    2d3a:	89 2b       	or	r24, r25
    2d3c:	41 f4       	brne	.+16     	; 0x2d4e <malloc+0xf6>
    2d3e:	80 91 89 01 	lds	r24, 0x0189
    2d42:	90 91 8a 01 	lds	r25, 0x018A
    2d46:	90 93 0d 02 	sts	0x020D, r25
    2d4a:	80 93 0c 02 	sts	0x020C, r24
    2d4e:	40 91 8b 01 	lds	r20, 0x018B
    2d52:	50 91 8c 01 	lds	r21, 0x018C
    2d56:	41 15       	cp	r20, r1
    2d58:	51 05       	cpc	r21, r1
    2d5a:	41 f4       	brne	.+16     	; 0x2d6c <malloc+0x114>
    2d5c:	4d b7       	in	r20, 0x3d	; 61
    2d5e:	5e b7       	in	r21, 0x3e	; 62
    2d60:	80 91 87 01 	lds	r24, 0x0187
    2d64:	90 91 88 01 	lds	r25, 0x0188
    2d68:	48 1b       	sub	r20, r24
    2d6a:	59 0b       	sbc	r21, r25
    2d6c:	20 91 0c 02 	lds	r18, 0x020C
    2d70:	30 91 0d 02 	lds	r19, 0x020D
    2d74:	24 17       	cp	r18, r20
    2d76:	35 07       	cpc	r19, r21
    2d78:	b0 f4       	brcc	.+44     	; 0x2da6 <malloc+0x14e>
    2d7a:	ca 01       	movw	r24, r20
    2d7c:	82 1b       	sub	r24, r18
    2d7e:	93 0b       	sbc	r25, r19
    2d80:	86 17       	cp	r24, r22
    2d82:	97 07       	cpc	r25, r23
    2d84:	80 f0       	brcs	.+32     	; 0x2da6 <malloc+0x14e>
    2d86:	ab 01       	movw	r20, r22
    2d88:	4e 5f       	subi	r20, 0xFE	; 254
    2d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8c:	84 17       	cp	r24, r20
    2d8e:	95 07       	cpc	r25, r21
    2d90:	50 f0       	brcs	.+20     	; 0x2da6 <malloc+0x14e>
    2d92:	42 0f       	add	r20, r18
    2d94:	53 1f       	adc	r21, r19
    2d96:	50 93 0d 02 	sts	0x020D, r21
    2d9a:	40 93 0c 02 	sts	0x020C, r20
    2d9e:	f9 01       	movw	r30, r18
    2da0:	61 93       	st	Z+, r22
    2da2:	71 93       	st	Z+, r23
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <malloc+0x152>
    2da6:	e0 e0       	ldi	r30, 0x00	; 0
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	cf 01       	movw	r24, r30
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	08 95       	ret

00002db2 <free>:
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <free+0xa>
    2dba:	50 c0       	rjmp	.+160    	; 0x2e5c <free+0xaa>
    2dbc:	ec 01       	movw	r28, r24
    2dbe:	22 97       	sbiw	r28, 0x02	; 2
    2dc0:	1b 82       	std	Y+3, r1	; 0x03
    2dc2:	1a 82       	std	Y+2, r1	; 0x02
    2dc4:	a0 91 0e 02 	lds	r26, 0x020E
    2dc8:	b0 91 0f 02 	lds	r27, 0x020F
    2dcc:	10 97       	sbiw	r26, 0x00	; 0
    2dce:	09 f1       	breq	.+66     	; 0x2e12 <free+0x60>
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	ac 17       	cp	r26, r28
    2dd6:	bd 07       	cpc	r27, r29
    2dd8:	08 f1       	brcs	.+66     	; 0x2e1c <free+0x6a>
    2dda:	bb 83       	std	Y+3, r27	; 0x03
    2ddc:	aa 83       	std	Y+2, r26	; 0x02
    2dde:	fe 01       	movw	r30, r28
    2de0:	21 91       	ld	r18, Z+
    2de2:	31 91       	ld	r19, Z+
    2de4:	e2 0f       	add	r30, r18
    2de6:	f3 1f       	adc	r31, r19
    2de8:	ae 17       	cp	r26, r30
    2dea:	bf 07       	cpc	r27, r31
    2dec:	79 f4       	brne	.+30     	; 0x2e0c <free+0x5a>
    2dee:	8d 91       	ld	r24, X+
    2df0:	9c 91       	ld	r25, X
    2df2:	11 97       	sbiw	r26, 0x01	; 1
    2df4:	28 0f       	add	r18, r24
    2df6:	39 1f       	adc	r19, r25
    2df8:	2e 5f       	subi	r18, 0xFE	; 254
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	39 83       	std	Y+1, r19	; 0x01
    2dfe:	28 83       	st	Y, r18
    2e00:	12 96       	adiw	r26, 0x02	; 2
    2e02:	8d 91       	ld	r24, X+
    2e04:	9c 91       	ld	r25, X
    2e06:	13 97       	sbiw	r26, 0x03	; 3
    2e08:	9b 83       	std	Y+3, r25	; 0x03
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
    2e0c:	41 15       	cp	r20, r1
    2e0e:	51 05       	cpc	r21, r1
    2e10:	71 f4       	brne	.+28     	; 0x2e2e <free+0x7c>
    2e12:	d0 93 0f 02 	sts	0x020F, r29
    2e16:	c0 93 0e 02 	sts	0x020E, r28
    2e1a:	20 c0       	rjmp	.+64     	; 0x2e5c <free+0xaa>
    2e1c:	12 96       	adiw	r26, 0x02	; 2
    2e1e:	8d 91       	ld	r24, X+
    2e20:	9c 91       	ld	r25, X
    2e22:	13 97       	sbiw	r26, 0x03	; 3
    2e24:	ad 01       	movw	r20, r26
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	11 f0       	breq	.+4      	; 0x2e2e <free+0x7c>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	d3 cf       	rjmp	.-90     	; 0x2dd4 <free+0x22>
    2e2e:	fa 01       	movw	r30, r20
    2e30:	d3 83       	std	Z+3, r29	; 0x03
    2e32:	c2 83       	std	Z+2, r28	; 0x02
    2e34:	21 91       	ld	r18, Z+
    2e36:	31 91       	ld	r19, Z+
    2e38:	e2 0f       	add	r30, r18
    2e3a:	f3 1f       	adc	r31, r19
    2e3c:	ce 17       	cp	r28, r30
    2e3e:	df 07       	cpc	r29, r31
    2e40:	69 f4       	brne	.+26     	; 0x2e5c <free+0xaa>
    2e42:	88 81       	ld	r24, Y
    2e44:	99 81       	ldd	r25, Y+1	; 0x01
    2e46:	28 0f       	add	r18, r24
    2e48:	39 1f       	adc	r19, r25
    2e4a:	2e 5f       	subi	r18, 0xFE	; 254
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4e:	fa 01       	movw	r30, r20
    2e50:	31 83       	std	Z+1, r19	; 0x01
    2e52:	20 83       	st	Z, r18
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	9b 81       	ldd	r25, Y+3	; 0x03
    2e58:	93 83       	std	Z+3, r25	; 0x03
    2e5a:	82 83       	std	Z+2, r24	; 0x02
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <isalnum>:
    2e62:	91 11       	cpse	r25, r1
    2e64:	06 c0       	rjmp	.+12     	; 0x2e72 <__ctype_isfalse>
    2e66:	80 53       	subi	r24, 0x30	; 48
    2e68:	8a 50       	subi	r24, 0x0A	; 10
    2e6a:	10 f0       	brcs	.+4      	; 0x2e70 <isalnum+0xe>
    2e6c:	86 5c       	subi	r24, 0xC6	; 198
    2e6e:	06 c0       	rjmp	.+12     	; 0x2e7c <isalpha>
    2e70:	08 95       	ret

00002e72 <__ctype_isfalse>:
    2e72:	99 27       	eor	r25, r25
    2e74:	88 27       	eor	r24, r24

00002e76 <__ctype_istrue>:
    2e76:	08 95       	ret

00002e78 <isupper>:
    2e78:	85 fd       	sbrc	r24, 5
    2e7a:	fb cf       	rjmp	.-10     	; 0x2e72 <__ctype_isfalse>

00002e7c <isalpha>:
    2e7c:	80 62       	ori	r24, 0x20	; 32

00002e7e <islower>:
    2e7e:	91 11       	cpse	r25, r1
    2e80:	f8 cf       	rjmp	.-16     	; 0x2e72 <__ctype_isfalse>
    2e82:	81 56       	subi	r24, 0x61	; 97
    2e84:	8a 51       	subi	r24, 0x1A	; 26
    2e86:	e0 f7       	brcc	.-8      	; 0x2e80 <islower+0x2>
    2e88:	08 95       	ret

00002e8a <strlen>:
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	01 90       	ld	r0, Z+
    2e8e:	00 20       	and	r0, r0
    2e90:	e9 f7       	brne	.-6      	; 0x2e8c <strlen+0x2>
    2e92:	80 95       	com	r24
    2e94:	90 95       	com	r25
    2e96:	8e 0f       	add	r24, r30
    2e98:	9f 1f       	adc	r25, r31
    2e9a:	08 95       	ret

00002e9c <floor>:
    2e9c:	3b d0       	rcall	.+118    	; 0x2f14 <__fp_trunc>
    2e9e:	80 f0       	brcs	.+32     	; 0x2ec0 <floor+0x24>
    2ea0:	9f 37       	cpi	r25, 0x7F	; 127
    2ea2:	40 f4       	brcc	.+16     	; 0x2eb4 <floor+0x18>
    2ea4:	91 11       	cpse	r25, r1
    2ea6:	0e f0       	brts	.+2      	; 0x2eaa <floor+0xe>
    2ea8:	4d c0       	rjmp	.+154    	; 0x2f44 <__fp_szero>
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	80 e8       	ldi	r24, 0x80	; 128
    2eb0:	9f eb       	ldi	r25, 0xBF	; 191
    2eb2:	08 95       	ret
    2eb4:	26 f4       	brtc	.+8      	; 0x2ebe <floor+0x22>
    2eb6:	1b 16       	cp	r1, r27
    2eb8:	61 1d       	adc	r22, r1
    2eba:	71 1d       	adc	r23, r1
    2ebc:	81 1d       	adc	r24, r1
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <__fp_mintl>
    2ec0:	1b c0       	rjmp	.+54     	; 0x2ef8 <__fp_mpack>

00002ec2 <__fp_mintl>:
    2ec2:	88 23       	and	r24, r24
    2ec4:	71 f4       	brne	.+28     	; 0x2ee2 <__fp_mintl+0x20>
    2ec6:	77 23       	and	r23, r23
    2ec8:	21 f0       	breq	.+8      	; 0x2ed2 <__fp_mintl+0x10>
    2eca:	98 50       	subi	r25, 0x08	; 8
    2ecc:	87 2b       	or	r24, r23
    2ece:	76 2f       	mov	r23, r22
    2ed0:	07 c0       	rjmp	.+14     	; 0x2ee0 <__fp_mintl+0x1e>
    2ed2:	66 23       	and	r22, r22
    2ed4:	11 f4       	brne	.+4      	; 0x2eda <__fp_mintl+0x18>
    2ed6:	99 27       	eor	r25, r25
    2ed8:	0d c0       	rjmp	.+26     	; 0x2ef4 <__fp_mintl+0x32>
    2eda:	90 51       	subi	r25, 0x10	; 16
    2edc:	86 2b       	or	r24, r22
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	2a f0       	brmi	.+10     	; 0x2eee <__fp_mintl+0x2c>
    2ee4:	9a 95       	dec	r25
    2ee6:	66 0f       	add	r22, r22
    2ee8:	77 1f       	adc	r23, r23
    2eea:	88 1f       	adc	r24, r24
    2eec:	da f7       	brpl	.-10     	; 0x2ee4 <__fp_mintl+0x22>
    2eee:	88 0f       	add	r24, r24
    2ef0:	96 95       	lsr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	97 f9       	bld	r25, 7
    2ef6:	08 95       	ret

00002ef8 <__fp_mpack>:
    2ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <__fp_mpack_finite+0xc>

00002efc <__fp_mpack_finite>:
    2efc:	91 50       	subi	r25, 0x01	; 1
    2efe:	20 f4       	brcc	.+8      	; 0x2f08 <__fp_mpack_finite+0xc>
    2f00:	87 95       	ror	r24
    2f02:	77 95       	ror	r23
    2f04:	67 95       	ror	r22
    2f06:	b7 95       	ror	r27
    2f08:	88 0f       	add	r24, r24
    2f0a:	91 1d       	adc	r25, r1
    2f0c:	96 95       	lsr	r25
    2f0e:	87 95       	ror	r24
    2f10:	97 f9       	bld	r25, 7
    2f12:	08 95       	ret

00002f14 <__fp_trunc>:
    2f14:	25 d0       	rcall	.+74     	; 0x2f60 <__fp_splitA>
    2f16:	a0 f0       	brcs	.+40     	; 0x2f40 <__fp_trunc+0x2c>
    2f18:	be e7       	ldi	r27, 0x7E	; 126
    2f1a:	b9 17       	cp	r27, r25
    2f1c:	88 f4       	brcc	.+34     	; 0x2f40 <__fp_trunc+0x2c>
    2f1e:	bb 27       	eor	r27, r27
    2f20:	9f 38       	cpi	r25, 0x8F	; 143
    2f22:	60 f4       	brcc	.+24     	; 0x2f3c <__fp_trunc+0x28>
    2f24:	16 16       	cp	r1, r22
    2f26:	b1 1d       	adc	r27, r1
    2f28:	67 2f       	mov	r22, r23
    2f2a:	78 2f       	mov	r23, r24
    2f2c:	88 27       	eor	r24, r24
    2f2e:	98 5f       	subi	r25, 0xF8	; 248
    2f30:	f7 cf       	rjmp	.-18     	; 0x2f20 <__fp_trunc+0xc>
    2f32:	86 95       	lsr	r24
    2f34:	77 95       	ror	r23
    2f36:	67 95       	ror	r22
    2f38:	b1 1d       	adc	r27, r1
    2f3a:	93 95       	inc	r25
    2f3c:	96 39       	cpi	r25, 0x96	; 150
    2f3e:	c8 f3       	brcs	.-14     	; 0x2f32 <__fp_trunc+0x1e>
    2f40:	08 95       	ret

00002f42 <__fp_zero>:
    2f42:	e8 94       	clt

00002f44 <__fp_szero>:
    2f44:	bb 27       	eor	r27, r27
    2f46:	66 27       	eor	r22, r22
    2f48:	77 27       	eor	r23, r23
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	97 f9       	bld	r25, 7
    2f4e:	08 95       	ret

00002f50 <__fp_split3>:
    2f50:	57 fd       	sbrc	r21, 7
    2f52:	90 58       	subi	r25, 0x80	; 128
    2f54:	44 0f       	add	r20, r20
    2f56:	55 1f       	adc	r21, r21
    2f58:	59 f0       	breq	.+22     	; 0x2f70 <__fp_splitA+0x10>
    2f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5c:	71 f0       	breq	.+28     	; 0x2f7a <__fp_splitA+0x1a>
    2f5e:	47 95       	ror	r20

00002f60 <__fp_splitA>:
    2f60:	88 0f       	add	r24, r24
    2f62:	97 fb       	bst	r25, 7
    2f64:	99 1f       	adc	r25, r25
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <__fp_splitA+0x20>
    2f68:	9f 3f       	cpi	r25, 0xFF	; 255
    2f6a:	79 f0       	breq	.+30     	; 0x2f8a <__fp_splitA+0x2a>
    2f6c:	87 95       	ror	r24
    2f6e:	08 95       	ret
    2f70:	12 16       	cp	r1, r18
    2f72:	13 06       	cpc	r1, r19
    2f74:	14 06       	cpc	r1, r20
    2f76:	55 1f       	adc	r21, r21
    2f78:	f2 cf       	rjmp	.-28     	; 0x2f5e <__fp_split3+0xe>
    2f7a:	46 95       	lsr	r20
    2f7c:	f1 df       	rcall	.-30     	; 0x2f60 <__fp_splitA>
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <__fp_splitA+0x30>
    2f80:	16 16       	cp	r1, r22
    2f82:	17 06       	cpc	r1, r23
    2f84:	18 06       	cpc	r1, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	f1 cf       	rjmp	.-30     	; 0x2f6c <__fp_splitA+0xc>
    2f8a:	86 95       	lsr	r24
    2f8c:	71 05       	cpc	r23, r1
    2f8e:	61 05       	cpc	r22, r1
    2f90:	08 94       	sec
    2f92:	08 95       	ret

00002f94 <_exit>:
    2f94:	f8 94       	cli

00002f96 <__stop_program>:
    2f96:	ff cf       	rjmp	.-2      	; 0x2f96 <__stop_program>
